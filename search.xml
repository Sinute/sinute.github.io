<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>树莓派迅雷远程下载</title>
    <url>/2014/10/19/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BF%85%E9%9B%B7%E8%BF%9C%E7%A8%8B%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="安装远程下载"><a href="#安装远程下载" class="headerlink" title="安装远程下载"></a>安装远程下载</h2><h4 id="1-从-http-g-xunlei-com-forum-51-1-html-下载Xware-树莓派对应Xware-armel-v5te-glibc-zip"><a href="#1-从-http-g-xunlei-com-forum-51-1-html-下载Xware-树莓派对应Xware-armel-v5te-glibc-zip" class="headerlink" title="1. 从 http://g.xunlei.com/forum-51-1.html 下载Xware(树莓派对应Xware_armel_v5te_glibc.zip)"></a>1. 从 <a href="http://g.xunlei.com/forum-51-1.html" target="_blank" rel="noopener">http://g.xunlei.com/forum-51-1.html</a> 下载Xware(树莓派对应Xware_armel_v5te_glibc.zip)</h4><h4 id="2-选择一个目录解压文件-如"><a href="#2-选择一个目录解压文件-如" class="headerlink" title="2. 选择一个目录解压文件, 如"></a>2. 选择一个目录解压文件, 如</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir ~/thunder</span><br><span class="line">unzip Xware_armel_v5te_glibc.zip -d ~/thunder</span><br></pre></td></tr></table></figure>

<h4 id="3-运行portal-得到ACTIVE-CODE"><a href="#3-运行portal-得到ACTIVE-CODE" class="headerlink" title="3. 运行portal, 得到ACTIVE CODE"></a>3. 运行portal, 得到ACTIVE CODE</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/thunder/portal</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="4-根据上一步得到的ACTIVE-CODE去-http-yuancheng-xunlei-com-添加设备"><a href="#4-根据上一步得到的ACTIVE-CODE去-http-yuancheng-xunlei-com-添加设备" class="headerlink" title="4. 根据上一步得到的ACTIVE CODE去 http://yuancheng.xunlei.com/ 添加设备"></a>4. 根据上一步得到的ACTIVE CODE去 <a href="http://yuancheng.xunlei.com/" target="_blank" rel="noopener">http://yuancheng.xunlei.com/</a> 添加设备</h4><p>至此远程下载部分安装完毕<br>但是这时候点击新建任务会发现提示”没有检测到外接存储设备”<br>这是因为下载目录需要检测外部挂载设备</p>
<hr>
<h2 id="自动挂载USB设备"><a href="#自动挂载USB设备" class="headerlink" title="自动挂载USB设备"></a>自动挂载USB设备</h2><h4 id="1-编辑文件"><a href="#1-编辑文件" class="headerlink" title="1. 编辑文件"></a>1. 编辑文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/udev/rules.d/10-usbstorage.rules</span><br></pre></td></tr></table></figure>

<h4 id="2-写入以下内容"><a href="#2-写入以下内容" class="headerlink" title="2. 写入以下内容"></a>2. 写入以下内容</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">KERNEL!=<span class="string">"sd*"</span>, GOTO=<span class="string">"media_by_label_auto_mount_end"</span></span><br><span class="line">SUBSYSTEM!=<span class="string">"block"</span>,GOTO=<span class="string">"media_by_label_auto_mount_end"</span></span><br><span class="line">IMPORT&#123;program&#125;=<span class="string">"/sbin/blkid -o udev -p %N"</span></span><br><span class="line">ENV&#123;ID_FS_TYPE&#125;==<span class="string">""</span>, GOTO=<span class="string">"media_by_label_auto_mount_end"</span></span><br><span class="line">ENV&#123;ID_FS_LABEL&#125;!=<span class="string">""</span>, ENV&#123;dir_name&#125;=<span class="string">"%E&#123;ID_FS_LABEL&#125;"</span></span><br><span class="line">ENV&#123;ID_FS_LABEL&#125;==<span class="string">""</span>, ENV&#123;dir_name&#125;=<span class="string">"Untitled-%k"</span></span><br><span class="line">ACTION==<span class="string">"add"</span>, ENV&#123;mount_options&#125;=<span class="string">"relatime,sync"</span></span><br><span class="line">ACTION==<span class="string">"add"</span>, ENV&#123;ID_FS_TYPE&#125;==<span class="string">"vfat"</span>, ENV&#123;mount_options&#125;=<span class="string">"iocharset=utf8,umask=000"</span></span><br><span class="line">ACTION==<span class="string">"add"</span>, ENV&#123;ID_FS_TYPE&#125;==<span class="string">"ntfs"</span>, ENV&#123;mount_options&#125;=<span class="string">"iocharset=utf8,umask=000"</span></span><br><span class="line">ACTION==<span class="string">"add"</span>, RUN+=<span class="string">"/bin/mkdir -p /media/%E&#123;dir_name&#125;"</span>, RUN+=<span class="string">"/bin/mount -o <span class="variable">$env</span>&#123;mount_options&#125; /dev/%k /%E&#123;dir_name&#125;"</span></span><br><span class="line"></span><br><span class="line">ACTION==<span class="string">"remove"</span>, ENV&#123;dir_name&#125;!=<span class="string">""</span>, RUN+=<span class="string">"/bin/umount -l /media/%E&#123;dir_name&#125;"</span>, RUN+=<span class="string">"/bin/rmdir dia/%E&#123;dir_name&#125;"</span></span><br><span class="line">LABEL=<span class="string">"media_by_label_auto_mount_end"</span></span><br></pre></td></tr></table></figure>

<p>现在就可以正常使用迅雷远程下载功能啦<br>如果不想使用外部USB设备则可以通过mount的方式绕过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount --<span class="built_in">bind</span> <span class="built_in">source</span> /media/XXX</span><br></pre></td></tr></table></figure>

<p>开机自动挂载, 在/etc/fstab加入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /media/XXX none <span class="built_in">bind</span> 0 0</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>迅雷</tag>
        <tag>远程下载</tag>
        <tag>RaspberryPi</tag>
      </tags>
  </entry>
  <entry>
    <title>rsync自动同步文件</title>
    <url>/2014/10/31/rsync%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>当A上的<code>/your/source/dir</code>内的文件发生改动时，自动从A上的<code>/your/source/dir</code>同步修改到B的<code>/your/destination/dir</code></p>
<h3 id="一-安装inotify-tools用于检测文件变动"><a href="#一-安装inotify-tools用于检测文件变动" class="headerlink" title="一. 安装inotify-tools用于检测文件变动"></a>一. 安装inotify-tools用于检测文件变动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install inotify-tools</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="二-同步脚本"><a href="#二-同步脚本" class="headerlink" title="二. 同步脚本"></a>二. 同步脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># rsync.sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">SRC=/your/<span class="built_in">source</span>/dir</span><br><span class="line">DST=username@host:/your/destination/dir</span><br><span class="line"></span><br><span class="line">inotifywait -mrq --exclude <span class="string">'.git*'</span> -e modify,delete,create,move <span class="variable">$&#123;SRC&#125;</span> | <span class="keyword">while</span> <span class="built_in">read</span> DIR EVENT FILE</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    /usr/bin/rsync -ahqzt --delete <span class="variable">$SRC</span> <span class="variable">$DST</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>脚本解释</strong></p>
<p>1 事件监听：<br>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">inotifywait -mrq --exclude <span class="string">'.git*'</span> -e modify,delete,create,move <span class="variable">$&#123;SRC&#125;</span></span><br></pre></td></tr></table></figure><br>  <code>-m</code> 保持监听，否则执行一次后退出<br>  <code>-r</code> 递归监听<br>  <code>-q</code> 只输出事件<br>  <code>--exclude &#39;.git*&#39;</code> 不监听.git开头的文件<br>  <code>-e modify,delete,create,move</code> 监听修改，删除，创建，移动事件</p>
<p>  所有支持的事件如下<br>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Events:</span><br><span class="line">  access          file or directory contents were <span class="built_in">read</span></span><br><span class="line">  modify          file or directory contents were written</span><br><span class="line">  attrib          file or directory attributes changed</span><br><span class="line">  close_write     file or directory closed, after being opened <span class="keyword">in</span></span><br><span class="line">                  writable mode</span><br><span class="line">  close_nowrite   file or directory closed, after being opened <span class="keyword">in</span></span><br><span class="line">                  <span class="built_in">read</span>-only mode</span><br><span class="line">  close           file or directory closed, regardless of <span class="built_in">read</span>/write mode</span><br><span class="line">  open            file or directory opened</span><br><span class="line">  moved_to        file or directory moved to watched directory</span><br><span class="line">  moved_from      file or directory moved from watched directory</span><br><span class="line">  move            file or directory moved to or from watched directory</span><br><span class="line">  create          file or directory created within watched directory</span><br><span class="line">  delete          file or directory deleted within watched directory</span><br><span class="line">  delete_self     file or directory was deleted</span><br><span class="line">  unmount         file system containing file or directory unmounted</span><br></pre></td></tr></table></figure><br>  该命令会返回3个值，分别为目录、事件、文件</p>
<p>2 同步<br>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync -ahqzt --delete <span class="variable">$SRC</span> <span class="variable">$DST</span></span><br></pre></td></tr></table></figure><br>  <code>-a</code> 归档模式<br>  <code>-h</code> 适合阅读<br>  <code>-q</code> 抑制非错误信息<br>  <code>-z</code> 压缩传输<br>  <code>-t</code> 保存修改事件<br>  <code>--delete</code> 删除目标文件夹中多余的文件</p>
<h3 id="三-自动启动"><a href="#三-自动启动" class="headerlink" title="三. 自动启动"></a>三. 自动启动</h3><p>在 <code>/etc/rc.local</code> 添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su - user -c <span class="string">'/path/rsync.sh'</span> &gt;&gt; <span class="string">'/path/rsync.log'</span> &amp;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>rsync</tag>
        <tag>inotify</tag>
        <tag>文件同步</tag>
      </tags>
  </entry>
  <entry>
    <title>inotify报&#39;upper limit on inotify watches reached&#39;错误解决</title>
    <url>/2014/12/15/inotify%E6%8A%A5upper_limit_on_inotify_watches_reached%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>在/etc/sysctl.conf中写入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fs.inotify.max_user_watches=8192000</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>inotify</tag>
      </tags>
  </entry>
  <entry>
    <title>Composer自动加载原理</title>
    <url>/2015/05/19/Composer%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="Composer自动加载原理"><a href="#Composer自动加载原理" class="headerlink" title="Composer自动加载原理"></a>Composer自动加载原理</h2><h3 id="autoload-php"><a href="#autoload-php" class="headerlink" title="autoload.php"></a>autoload.php</h3><p>入口文件autoload.php中非常简单, 引入了autoload_real.php并调用了ComposerAutoloaderInitXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX::getLoader()</p>
<a id="more"></a>

<h3 id="autoload-real-php"><a href="#autoload-real-php" class="headerlink" title="autoload_real.php"></a>autoload_real.php</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">spl_autoload_register(<span class="keyword">array</span>(<span class="string">'ComposerAutoloaderInitXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'</span>, <span class="string">'loadClassLoader'</span>), <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">self</span>::$loader = $loader = <span class="keyword">new</span> \Composer\Autoload\ClassLoader();</span><br><span class="line">spl_autoload_unregister(<span class="keyword">array</span>(<span class="string">'ComposerAutoloaderInitXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'</span>, <span class="string">'loadClassLoader'</span>));</span><br></pre></td></tr></table></figure>
<p>getLoader中首先注册了自身的loadClassLoader方法用于自动加载ClassLoader.php, 在加载完成后马上注销了该自动加载</p>
<p>然后分别注册autoload_namespaces, autoload_psr4, autoload_classmap<br>可以看到这几个文件中保存的都是类似 <code>类名 =&gt; 位置</code>的键值对<br>接着<code>$loader-&gt;register(true);</code>进行注册<br>最后引入autoload_files</p>
<h3 id="ClassLoader-php"><a href="#ClassLoader-php" class="headerlink" title="ClassLoader.php"></a>ClassLoader.php</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">($prepend = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    spl_autoload_register(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="string">'loadClass'</span>), <span class="keyword">true</span>, $prepend);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loadClass</span><span class="params">($class)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($file = <span class="keyword">$this</span>-&gt;findFile($class)) &#123;</span><br><span class="line">        includeFile($file);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在register方法中将自身的loadClass方法注册为自动载入实现<br>剩下的就比较简单了<br>loadClass中的findFile通过类名在autoload_real.php中注册的几坨键值对去查找对应的位置, 找到就加载</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>composer</tag>
        <tag>autoload</tag>
      </tags>
  </entry>
  <entry>
    <title>Raspberry Pi 安装 Golang 1.6</title>
    <url>/2016/05/11/Raspberry-Pi-%E5%AE%89%E8%A3%85Golang-1.6/</url>
    <content><![CDATA[<p>由于树莓派性能的关系, 蛋疼的编译时间想必大家也都知道了<em>:(´ཀ`」 ∠):</em><br>因此推荐使用官网提供的armv6l包直接安装</p>
<a id="more"></a>

<p>在 <code>https://golang.org/dl/</code> 找到 <code>armv6l</code> 包下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; cd &#x2F;usr&#x2F;local</span><br><span class="line">&gt; wget https:&#x2F;&#x2F;storage.googleapis.com&#x2F;golang&#x2F;go1.6.linux-armv6l.tar.gz</span><br></pre></td></tr></table></figure>

<p>展开</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; sudo tar -zxvf go1.6.linux-armv6l.tar.gz</span><br></pre></td></tr></table></figure>

<p>设定 PATH 以及 GOROOT</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; export PATH&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin:$PATH&quot;</span><br><span class="line">&gt; export GOROOT&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;go&quot;</span><br></pre></td></tr></table></figure>

<p>状态确认</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; go version</span><br><span class="line">go version go1.6 linux&#x2F;arm</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>RaspberryPi</tag>
        <tag>树莓派</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Composer版本号基本用法</title>
    <url>/2016/05/18/Composer-%E7%89%88%E6%9C%AC%E5%8F%B7-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><table>
<thead>
<tr>
<th></th>
<th>用法</th>
<th>适用版本</th>
</tr>
</thead>
<tbody><tr>
<td>确切指定</td>
<td>2.3.3</td>
<td>2.3.3</td>
</tr>
<tr>
<td>大于</td>
<td>&gt;2.3.3</td>
<td>&gt;2.3.3</td>
</tr>
<tr>
<td>大于等于</td>
<td>&gt;=2.3.3</td>
<td>&gt;=2.3.3</td>
</tr>
<tr>
<td>小于</td>
<td>&lt;2.3.3</td>
<td>&lt;2.3.3</td>
</tr>
<tr>
<td>小于等于</td>
<td>&lt;=2.3.3</td>
<td>&lt;=2.3.3</td>
</tr>
<tr>
<td>不等于</td>
<td>!=2.3.3</td>
<td>!=2.3.3</td>
</tr>
<tr>
<td>范围</td>
<td>2.0.0 - 2.1.0</td>
<td>&gt;=2.0.0 &amp;&amp; &lt; 2.1.0</td>
</tr>
<tr>
<td>通配</td>
<td>1.0.*</td>
<td>&gt;=1.0 &amp;&amp; &lt; 1.1</td>
</tr>
<tr>
<td>^</td>
<td>^2.3.3</td>
<td>&gt;=2.3.3 &amp;&amp; &lt;3.0</td>
</tr>
<tr>
<td>~</td>
<td>~2.3.3</td>
<td>&gt;=2.3.3 &amp;&amp; &lt;2.4</td>
</tr>
</tbody></table>
<h1 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h1><p><a href="https://getcomposer.org/doc/articles/versions.md" target="_blank" rel="noopener">https://getcomposer.org/doc/articles/versions.md</a></p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>composer</tag>
        <tag>version</tag>
        <tag>usage</tag>
      </tags>
  </entry>
  <entry>
    <title>in_array的诡异行为</title>
    <url>/2016/07/08/in_array%E7%9A%84%E8%AF%A1%E5%BC%82%E8%A1%8C%E4%B8%BA/</url>
    <content><![CDATA[<p>记录之前在使用laravel5的验证时踩到的一个坑</p>
<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Validator::make(</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'Dayle'</span>],</span><br><span class="line">    [<span class="string">'name'</span> =&gt; <span class="string">'in:Peter, Dayle'</span>]</span><br><span class="line">);</span><br><span class="line"><span class="comment">// The selected name is invalid.</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="in的实现"><a href="#in的实现" class="headerlink" title="in的实现"></a>in的实现</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// in的实现</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">validateIn</span><span class="params">($attribute, $value, $parameters)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> in_array((string) $value, $parameters);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $parameters的获取</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseParameters</span><span class="params">($rule, $parameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (strtolower($rule) == <span class="string">'regex'</span>) <span class="keyword">return</span> <span class="keyword">array</span>($parameter);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str_getcsv($parameter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到in的验证就是简单的调用了in_array方法</p>
<p>而参数的获取则是调用了str_getcsv</p>
<p>则原因在于逗号之后的空格导致参数被拆分成了 <code>Peter</code> 和 <code>Dayle</code> (注意Dayle前面有空格)</p>
<p>Dayle前面多了一个空格导致in_array判断失败</p>
<h2 id="异象"><a href="#异象" class="headerlink" title="异象"></a>异象</h2><p>回想一下之前的用法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Validator::make(</span><br><span class="line">    [<span class="string">'id'</span> =&gt; <span class="string">'1'</span>],</span><br><span class="line">    [<span class="string">'id'</span> =&gt; <span class="string">'in:1, 2, 3'</span>]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>竟然没问题!?</p>
<p><img src="https://img.nichijou.me/20200606193818.jpg" alt=""></p>
<p>看起来原因在传入的值为数字还是字符上</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>为了空格能显示得更清楚, 这边的空格用_代替, 下同</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(in_array(<span class="string">'1'</span>, [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>])); <span class="comment">// bool(true)</span></span><br><span class="line">var_dump(in_array(<span class="string">'1'</span>, [<span class="string">'1_'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>])); <span class="comment">// bool(false)</span></span><br><span class="line">var_dump(in_array(<span class="string">'1'</span>, [<span class="string">'_1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>])); <span class="comment">// bool(true)</span></span><br><span class="line">var_dump(in_array(<span class="number">1</span>, [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>])); <span class="comment">// bool(true)</span></span><br><span class="line">var_dump(in_array(<span class="number">1</span>, [<span class="string">'1_'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>])); <span class="comment">// bool(true)</span></span><br><span class="line">var_dump(in_array(<span class="number">1</span>, [<span class="string">'_1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>])); <span class="comment">// bool(true)</span></span><br><span class="line">var_dump(in_array(<span class="string">'a'</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])); <span class="comment">// bool(true)</span></span><br><span class="line">var_dump(in_array(<span class="string">'a'</span>, [<span class="string">'a_'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])); <span class="comment">// bool(false)</span></span><br><span class="line">var_dump(in_array(<span class="string">'a'</span>, [<span class="string">'_a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])); <span class="comment">// bool(false)</span></span><br></pre></td></tr></table></figure>

<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>从结果上来看:</p>
<blockquote>
<ol>
<li>string类型数字可以前置空格</li>
<li>int类型可以前置/后置空格</li>
<li>非数字字符严格匹配</li>
</ol>
</blockquote>
<p>根据PHP的官方文档:</p>
<blockquote>
<p>如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换为数值并且比较按照数值来进行。</p>
</blockquote>
<p>可以解释 2 和 3 的结论</p>
<p><strong>但是</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(<span class="string">'1'</span>== <span class="string">'_1'</span>); <span class="comment">// bool(true)</span></span><br><span class="line">var_dump(<span class="string">'1'</span>== <span class="string">'1_'</span>); <span class="comment">// bool(false)</span></span><br></pre></td></tr></table></figure>

<p><img src="//ww2.sinaimg.cn/mw690/6ca13d2cgw1f5upb6446qj20c80as0tk.jpg" alt=""></p>
<p>喵喵喵?</p>
<p>说好的转换呢?</p>
<p>反过来对于in的验证</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Validator::make(</span><br><span class="line">    [<span class="string">'id'</span> =&gt; <span class="string">'1'</span>],</span><br><span class="line">    [<span class="string">'id'</span> =&gt; <span class="string">'in:1 ,2 ,3'</span>]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>将导致验证失败</p>
<p>所以对于使用laravel的in做验证时, 最好写成</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Validator::make(</span><br><span class="line">    [<span class="string">'id'</span> =&gt; <span class="string">'1'</span>],</span><br><span class="line">    [<span class="string">'id'</span> =&gt; <span class="string">'in:1,2,3'</span>]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>#少给自己挖坑#</p>
<p><em>为自己以前的写法捏把汗</em></p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>in_array</tag>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP7 Throwable</title>
    <url>/2016/07/15/PHP7-Throwable/</url>
    <content><![CDATA[<h1 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h1><p><a href="http://php.net/manual/en/class.throwable.php" target="_blank" rel="noopener">Throwable</a> 是PHP7中新增的一个基础接口, 实现这个接口的类可以通过 <a href="http://php.net/manual/en/language.exceptions.php" target="_blank" rel="noopener">throw</a> 抛出, <a href="http://php.net/manual/en/class.error.php" target="_blank" rel="noopener">Error</a> 和 <a href="http://php.net/manual/en/class.exception.php" target="_blank" rel="noopener">Exception</a> 都实现了这个接口</p>
<blockquote>
<p>需要注意的是, 这个接口不能直接被实现, 而是需要通过继承 <a href="http://php.net/manual/en/class.exception.php" target="_blank" rel="noopener">Exception</a> 来实现</p>
</blockquote>
<h1 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h1><p><a href="http://php.net/manual/en/class.error.php" target="_blank" rel="noopener">Error</a> 是PHP7中新增的一个基础类</p>
<p>它的方法以及行为和 <a href="http://php.net/manual/en/class.exception.php" target="_blank" rel="noopener">Exception</a> 非常相似</p>
<a id="more"></a>

<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> NOTEXISTSCLASS;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable $e) &#123;</span><br><span class="line">    <span class="keyword">echo</span> get_class($e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5.6: Fatal error: Class 'NOTEXISTSCLASS' not found</span></span><br><span class="line"><span class="comment">// 7.0: Error</span></span><br></pre></td></tr></table></figure>

<h1 id="可能产生的影响"><a href="#可能产生的影响" class="headerlink" title="可能产生的影响"></a>可能产生的影响</h1><ol>
<li>如果你曾经在全局命名空间下定义了 Error 类, 那么会产生一个重定义的错误</li>
<li>如果你在异常处理中约束了参数类型为 <a href="http://php.net/manual/en/class.exception.php" target="_blank" rel="noopener">Exception</a> , 需要修改为 <a href="http://php.net/manual/en/class.throwable.php" target="_blank" rel="noopener">Throwable</a></li>
</ol>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>throwable</tag>
        <tag>error</tag>
        <tag>exception</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Behat进行行为驱动测试</title>
    <url>/2016/08/02/%E4%BD%BF%E7%94%A8Behat%E8%BF%9B%E8%A1%8C%E8%A1%8C%E4%B8%BA%E9%A9%B1%E5%8A%A8%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="什么是Behat"><a href="#什么是Behat" class="headerlink" title="什么是Behat"></a>什么是Behat</h1><p>Behat 是一个开源的行为驱动开发框架</p>
<h3 id="何为行为驱动"><a href="#何为行为驱动" class="headerlink" title="何为行为驱动"></a>何为行为驱动</h3><p>它提供了一个简单语意化的方式, 让非程序员也可以使用类似自然语言的方式编写测试用例来参与到测试过程中<br>另外行为驱动更偏向于描述软件的行为, 相对于单元测试来说, 它更关心整体功能是否可以交付而不关心代码的具体细节</p>
<a id="more"></a>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>clone源代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; git <span class="built_in">clone</span> https://github.com/Behat/Behat.git</span><br><span class="line">&gt; <span class="built_in">cd</span> Behat</span><br><span class="line">&gt; composer install -vvv</span><br></pre></td></tr></table></figure>

<p>然后就可以通过以下方式执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; bin/behat</span><br></pre></td></tr></table></figure>

<h1 id="如何开始"><a href="#如何开始" class="headerlink" title="如何开始"></a>如何开始</h1><h3 id="三种基础关键字"><a href="#三种基础关键字" class="headerlink" title="三种基础关键字"></a>三种基础关键字</h3><p><code>Given</code> , <code>When</code> , <code>Then</code></p>
<p>例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given there is a &quot;Sith Lord Lightsaber&quot;, which costs £5</span><br><span class="line">When there is a &quot;Sith Lord Lightsaber&quot;, which costs £10</span><br><span class="line">Then there is an &quot;Anakin Lightsaber&quot;, which costs £10</span><br></pre></td></tr></table></figure>

<h3 id="初始化环境文件"><a href="#初始化环境文件" class="headerlink" title="初始化环境文件"></a>初始化环境文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; behat --init</span><br></pre></td></tr></table></figure>

<p>可以看到在 <code>features/bootstrap</code> 下生成了 <code>FeatureContext.php</code> 文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Behat</span>\<span class="title">Behat</span>\<span class="title">Context</span>\<span class="title">Context</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Behat</span>\<span class="title">Behat</span>\<span class="title">Context</span>\<span class="title">SnippetAcceptingContext</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Behat</span>\<span class="title">Gherkin</span>\<span class="title">Node</span>\<span class="title">PyStringNode</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Behat</span>\<span class="title">Gherkin</span>\<span class="title">Node</span>\<span class="title">TableNode</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Defines application features from the specific context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeatureContext</span> <span class="keyword">implements</span> <span class="title">Context</span>, <span class="title">SnippetAcceptingContext</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initializes context.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Every scenario gets its own context instance.</span></span><br><span class="line"><span class="comment">     * You can also pass arbitrary arguments to the</span></span><br><span class="line"><span class="comment">     * context constructor through behat.yml.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在环境文件中, 我们可以定义如何解析基础步骤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Given</span> there is a(n) :arg1, which costs £:arg2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">thereIsAWhichCostsPs</span><span class="params">($arg1, $arg2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> PendingException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者通过正则的方式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Given</span> /there is an? \"([^\"]+)\", which costs £([\d\.]+)/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">thereIsAWhichCostsPs</span><span class="params">($arg1, $arg2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> PendingException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写特性文件"><a href="#编写特性文件" class="headerlink" title="编写特性文件"></a>编写特性文件</h3><p>特性文件是一个由几个关键词组成的.feature文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Feature: Some terse yet descriptive text of what is desired</span><br><span class="line">  In order to realize a named business value</span><br><span class="line">  <span class="keyword">As</span> an explicit system actor</span><br><span class="line">  I want to gain some beneficial outcome which furthers the goal</span><br><span class="line"></span><br><span class="line">  Additional text...</span><br><span class="line"></span><br><span class="line">  Scenario: Some determinable business situation</span><br><span class="line">    Given some precondition</span><br><span class="line">    <span class="keyword">And</span> some other precondition</span><br><span class="line">    When some action by the actor</span><br><span class="line">    <span class="keyword">And</span> some other action</span><br><span class="line">    <span class="keyword">And</span> yet another action</span><br><span class="line">    Then some testable outcome is achieved</span><br><span class="line">    <span class="keyword">And</span> something <span class="keyword">else</span> we can check happens too</span><br><span class="line"></span><br><span class="line">  Scenario: A different situation</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p><code>Feature</code> 描述了这个测试的作用和目的<br><code>Scenario</code> 描述了测试的过程</p>
<h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><p>你可以在根目录下创建 <code>behat.yml</code> 来自定义你的配置<br>包括:</p>
<ul>
<li>设置自动载入</li>
<li>管理套件</li>
<li>设置过滤器</li>
<li>设置环境变量</li>
<li>格式化工具</li>
<li>其他扩展</li>
</ul>
<p>一个简单的例子</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">default:</span></span><br><span class="line">    <span class="attr">suites:</span></span><br><span class="line">        <span class="attr">user:</span></span><br><span class="line">            <span class="attr">paths:</span>    <span class="string">[</span> <span class="string">%paths.base%/features/user</span> <span class="string">]</span></span><br><span class="line">            <span class="attr">contexts:</span> <span class="string">[</span> <span class="string">MyBehatTest\Context\UserContext</span> <span class="string">]</span></span><br><span class="line">        <span class="attr">admin:</span></span><br><span class="line">            <span class="attr">paths:</span>    <span class="string">[</span> <span class="string">%paths.base%/features/admin</span> <span class="string">]</span></span><br><span class="line">            <span class="attr">contexts:</span> <span class="string">[</span> <span class="string">MyBehatTest\Context\AdminContext</span> <span class="string">]</span></span><br><span class="line">        <span class="attr">api:</span></span><br><span class="line">            <span class="attr">paths:</span>    <span class="string">[</span> <span class="string">%paths.base%/features/api</span> <span class="string">]</span></span><br><span class="line">            <span class="attr">contexts:</span> <span class="string">[</span> <span class="string">MyBehatTest\Context\ApiContext</span> <span class="string">]</span></span><br></pre></td></tr></table></figure>

<h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; behat -s user <span class="comment"># 指定执行user套件</span></span><br></pre></td></tr></table></figure>

<h1 id="结合composer使用"><a href="#结合composer使用" class="headerlink" title="结合composer使用"></a>结合composer使用</h1><p>如果你想使用第三方包或者使用composer的autoload来引入你的代码<br>你只需要简单的创建composer.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"require"</span>: &#123;</span><br><span class="line">        <span class="attr">"behat/behat"</span>: <span class="string">"~3.1.0"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"autoload"</span>: &#123;</span><br><span class="line">        <span class="attr">"psr-4"</span>: &#123;</span><br><span class="line">            <span class="attr">"MyBehatTest\\"</span>: <span class="string">"src/"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后和平时一样执行 install 即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; composer install</span><br></pre></td></tr></table></figure>

<p>安装完毕后, 使用以下命令执行测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; ./vendor/bin/behat</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Behat</tag>
      </tags>
  </entry>
  <entry>
    <title>solr入门系列1-安装</title>
    <url>/2016/09/03/solr%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%971-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="什么是solr"><a href="#什么是solr" class="headerlink" title="什么是solr"></a>什么是solr</h1><blockquote>
<p>Solr（读作“solar”）是Apache Lucene项目的开源企业搜索平台。其主要功能包括全文检索、命中标示[1]、分面搜索、动态聚类、数据库集成，以及富文本（如Word、PDF）的处理。Solr是高度可扩展的，并提供了分布式搜索和索引复制。Solr是最流行的企业级搜索引擎，Solr 4还增加了NoSQL支持。<br>– 摘自维基百科</p>
</blockquote>
<p>一句话概括: 一个搜索引擎</p>
<a id="more"></a>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h3 id="下载solr"><a href="#下载solr" class="headerlink" title="下载solr"></a>下载solr</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; wget http://apache.fayea.com/lucene/solr/6.2.0/solr-6.2.0.tgz</span><br><span class="line">&gt; tar -xvf solr-6.2.0.tgz</span><br></pre></td></tr></table></figure>

<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">cd</span> solr-6.2.0</span><br><span class="line">&gt; ./bin/solr start</span><br></pre></td></tr></table></figure>

<p>打开 <a href="http://localhost:8983/solr/#/" target="_blank" rel="noopener">http://localhost:8983/solr/#/</a> 应该可以看到solr已经跑起来了 <img src="//ww3.sinaimg.cn/large/6ca13d2cgw1f7hfd8m8msj20tk0jaq6y.jpg" alt=""></p>
<blockquote>
<p><a href="/2016/09/03/solr入门系列2-创建自己的搜索引擎.html">下一篇</a> 将介绍如何创建自己的搜索引擎</p>
</blockquote>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>solr</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>solr入门系列2-创建自己的搜索引擎</title>
    <url>/2016/09/03/solr%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%972-%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<blockquote>
<p>在 <a href="/2016/09/03/solr入门系列1-安装.html">上一篇</a> 中, 我们安装并启动了solr服务器, 在这一篇中, 我们将从0开始创建我们自己的搜索服务<br>在本篇中, 将会介绍如何创建自己的搜索引擎, 并往其中插入索引数据</p>
</blockquote>
<a id="more"></a>

<h1 id="假设情景"><a href="#假设情景" class="headerlink" title="假设情景"></a>假设情景</h1><p>我们从动漫花园爬取了所有的动画分类数据, 然后需要一个搜索引擎, 来帮助我们索引数据</p>
<h1 id="创建core"><a href="#创建core" class="headerlink" title="创建core"></a>创建core</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; ./bin/solr create_core -c my_core</span><br></pre></td></tr></table></figure>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>在创建完core之后, 可以在 <code>server/solr</code> 下看到生成了一个名为 <code>my_core</code> 的目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── conf</span><br><span class="line">│   ├── currency.xml</span><br><span class="line">│   ├── elevate.xml</span><br><span class="line">│   ├── lang</span><br><span class="line">│   ├── managed-schema</span><br><span class="line">│   ├── params.json</span><br><span class="line">│   ├── protwords.txt</span><br><span class="line">│   ├── solrconfig.xml</span><br><span class="line">│   ├── stopwords.txt</span><br><span class="line">│   └── synonyms.txt</span><br><span class="line">├── core.properties</span><br><span class="line">└── data</span><br><span class="line">    ├── index</span><br><span class="line">    ├── snapshot_metadata</span><br><span class="line">    └── tlog</span><br></pre></td></tr></table></figure>

<p>其中最关键的2个文件为 <code>conf/managed-schema</code> 和 <code>conf/solrconfig.xml</code></p>
<h3 id="managed-schema"><a href="#managed-schema" class="headerlink" title="managed-schema"></a>managed-schema</h3><p>在 <code>managed-schema</code> 中, 定义我们的数据类型, 记得 <strong>保存后重启core</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 记录id --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 字幕组名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"fansub_name"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">required</span>=<span class="string">"false"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 字幕组id --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"fansub_id"</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">required</span>=<span class="string">"false"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 动画标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">required</span>=<span class="string">"false"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">copyField</span> <span class="attr">source</span>=<span class="string">"fansub_name"</span> <span class="attr">dest</span>=<span class="string">"_text_"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">copyField</span> <span class="attr">source</span>=<span class="string">"title"</span> <span class="attr">dest</span>=<span class="string">"_text_"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>几种属性解释</p>
<ul>
<li>type 对应字段类型</li>
<li>indexed 是否需要索引数据, 如果为false则无法通过该字段检索</li>
<li>stored 是否在solr中保存该值, 如果为false则搜索结果中不会返回该字段</li>
<li>multiValued 是否为多值</li>
</ul>
<blockquote>
<p>其中 <code>copyField</code> 字段的意思是将 <code>fansub_name</code> 和 <code>title</code> 放到 <code>_text_</code> 字段中去, 使得查询 <code>_text_</code> 字段时可以同时检索 <code>fansub_name</code> 和 <code>title</code></p>
</blockquote>
<h1 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST -H <span class="string">"Content-Type: application/json"</span> -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">  "add": &#123;</span></span><br><span class="line"><span class="string">    "doc": &#123;</span></span><br><span class="line"><span class="string">      "id": 11243,</span></span><br><span class="line"><span class="string">      "title": "[澄空学园&amp;华盟字幕社] 四月是你的谎言 第01-22话 MKV 720p 简体外挂 合集 特典付",</span></span><br><span class="line"><span class="string">      "fansub_name": "澄空学园",</span></span><br><span class="line"><span class="string">      "fansub_id": 58</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "commitWithin": 1000,</span></span><br><span class="line"><span class="string">    "overwrite": true</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;'</span> <span class="string">"http://localhost:8983/solr/my_core/update/?wt=json"</span></span><br></pre></td></tr></table></figure>

<p>使用solrAdmin查看, 应该可以看到刚才创建的记录</p>
<p><img src="//ww1.sinaimg.cn/large/6ca13d2cgw1f7hr4os9m1j20v10h2adt.jpg" alt=""></p>
<blockquote>
<p><a href="/2016/09/03/solr入门系列3-使用DataImport构建索引.html">下一篇</a> 将介绍如何使用DataImport来构建索引</p>
</blockquote>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>solr</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>solr入门系列3-使用DataImport构建索引</title>
    <url>/2016/09/03/solr%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%973-%E4%BD%BF%E7%94%A8DataImport%E6%9E%84%E5%BB%BA%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<blockquote>
<p>在 <a href="/2016/09/03/solr入门系列2-创建自己的搜索引擎.html">上一篇</a> 中, 我们创建了自己的搜索引擎, 并往其中手动插入了一条数据<br>在本篇中, 我们将会使用DataImport来构建我们的数据</p>
</blockquote>
<a id="more"></a>

<h1 id="solrconfig-xml"><a href="#solrconfig-xml" class="headerlink" title="solrconfig.xml"></a>solrconfig.xml</h1><p>还记得上一篇 <code>conf</code> 中另一个配置文件 <code>solrconfig.xml</code> 吗<br>在其中加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入dataimporthandler --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lib</span> <span class="attr">dir</span>=<span class="string">"$&#123;solr.install.dir:../../../..&#125;/dist/"</span> <span class="attr">regex</span>=<span class="string">"solr-dataimporthandler-.*\.jar"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">requestHandler</span> <span class="attr">name</span>=<span class="string">"/dataimport"</span> <span class="attr">class</span>=<span class="string">"org.apache.solr.handler.dataimport.DataImportHandler"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">lst</span> <span class="attr">name</span>=<span class="string">"defaults"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"config"</span>&gt;</span>data-config.xml<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">lst</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">requestHandler</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="data-config-xml"><a href="#data-config-xml" class="headerlink" title="data-config.xml"></a>data-config.xml</h1><p>在 <code>conf</code> 目录下, 创建 <code>data-config.xml</code>, 写入数据源信息, 以及如何构建数据</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataConfig</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"JdbcDataSource"</span> <span class="attr">driver</span>=<span class="string">"com.mysql.jdbc.Driver"</span> <span class="attr">url</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/dmhy"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"admin"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">document</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">entity</span> <span class="attr">name</span>=<span class="string">"publish"</span> <span class="attr">transformer</span>=<span class="string">"DateFormatTransformer"</span> <span class="attr">query</span>=<span class="string">"SELECT publish.id, publish.title, fansub.name as fansub_name, fansub.id as fansub_id FROM publish LEFT JOIN fansub ON (publish.fansub_id = fansub.id) WHERE publish.id &gt;= $&#123;dataimporter.request.id&#125;"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">name</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"fansub_name"</span> <span class="attr">name</span>=<span class="string">"fansub_name"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"fansub_id"</span> <span class="attr">name</span>=<span class="string">"fansub_id"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"title"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">document</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataConfig</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应数据表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 动画记录表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`publish`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`category_id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`fansub_id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`link`</span> <span class="built_in">varchar</span>(<span class="number">250</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`download_link`</span> <span class="built_in">varchar</span>(<span class="number">20000</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`file_size`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`publisher_id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`publish_time`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`created_at`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`updated_at`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`deleted_at`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`link`</span> (<span class="string">`link`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字幕组表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`fansub`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`created_at`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`updated_at`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`deleted_at`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci;</span><br></pre></td></tr></table></figure>

<p><strong>重启core</strong></p>
<h1 id="DataImport"><a href="#DataImport" class="headerlink" title="DataImport"></a>DataImport</h1><p>在solrAdmin中, 打开DataImport, 点击执行</p>
<p><img src="//ww3.sinaimg.cn/large/6ca13d2cgw1f7hs1rim28j20ue0dcacv.jpg" alt=""></p>
<p>导入成功后, 应该可以正常搜索</p>
<p><img src="//ww4.sinaimg.cn/large/6ca13d2cgw1f7hs5bgbrkj20wm0nfgsw.jpg" alt=""></p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>solr</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu禁用ctrl+p快捷键</title>
    <url>/2016/10/21/ubuntu%E7%A6%81%E7%94%A8ctrl-p%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<ol>
<li>安装 <code>dconf-tools</code></li>
<li>打开 <code>dconf-editor</code> , org -&gt; gnome -&gt; settings-daemon -&gt; plugins -&gt; xrandr</li>
<li>取消 active</li>
</ol>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>从源码编译PHP-5.3</title>
    <url>/2017/01/24/%E4%BB%8E%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91php-5-3/</url>
    <content><![CDATA[<blockquote>
<p><strong>下面使用的工具和源码都以PHP-5.3.13作为基础</strong></p>
</blockquote>
<h1 id="需要准备的工具"><a href="#需要准备的工具" class="headerlink" title="需要准备的工具"></a>需要准备的工具</h1><p>官网上的需求:</p>
<blockquote>
<p>autoconf: 2.13+ (for PHP &lt; 5.4.0), 2.59+ (for PHP &gt;= 5.4.0)<br>automake: 1.4+<br>libtool: 1.4.x+ (except 1.4.2)<br>re2c: Version 0.13.4 or newer<br>flex: Version 2.5.4 (for PHP &lt;= 5.2)<br>bison:<br>PHP 5.4: 1.28, 1.35, 1.75, 1.875, 2.0, 2.1, 2.2, 2.3, 2.4, 2.4.1, 2.4.2, 2.4.3, 2.5, 2.5.1, 2.6, 2.6.1, 2.6.2, 2.6.4<br>PHP 5.5: 2.4, 2.4.1, 2.4.2, 2.4.3, 2.5, 2.5.1, 2.6, 2.6.1, 2.6.2, 2.6.3, 2.6.4, 2.6.5, 2.7<br>PHP 5.6: 2.4 or later, excluding 3.0 only (3.0.1 and later are OK)<br>PHP 7.0: 2.4 or later</p>
</blockquote>
<a id="more"></a>

<p>本次使用:</p>
<ul>
<li><a href="https://ftp.gnu.org/gnu/autoconf/" target="_blank" rel="noopener">autoconf 2.13</a></li>
<li><a href="https://ftp.gnu.org/gnu/automake/" target="_blank" rel="noopener">automake 1.4</a></li>
<li><a href="https://ftp.gnu.org/gnu/libtool/" target="_blank" rel="noopener">libtool 1.4</a></li>
<li><a href="http://re2c.org/install/install.html" target="_blank" rel="noopener">re2c 0.13.6</a></li>
</ul>
<h3 id="安装autoconf"><a href="#安装autoconf" class="headerlink" title="安装autoconf"></a>安装autoconf</h3><blockquote>
<p>wget <a href="https://ftp.gnu.org/gnu/autoconf/autoconf-2.13.tar.gz" target="_blank" rel="noopener">https://ftp.gnu.org/gnu/autoconf/autoconf-2.13.tar.gz</a><br>tar -zxvf autoconf-2.13.tar.gz<br>cd autoconf-2.13<br>./configure –prefix=/Users/Sinute/local<br>make<br>make install</p>
</blockquote>
<h3 id="安装automake"><a href="#安装automake" class="headerlink" title="安装automake"></a>安装automake</h3><blockquote>
<p>wget <a href="https://ftp.gnu.org/gnu/automake/automake-1.4.tar.gz" target="_blank" rel="noopener">https://ftp.gnu.org/gnu/automake/automake-1.4.tar.gz</a><br>tar -zxvf automake-1.4.tar.gz<br>cd automake-1.4<br>./configure –prefix=/Users/Sinute/local<br>make<br>make install</p>
</blockquote>
<h3 id="安装libtool"><a href="#安装libtool" class="headerlink" title="安装libtool"></a>安装libtool</h3><blockquote>
<p>wget <a href="https://ftp.gnu.org/gnu/libtool/libtool-1.4.tar.gz" target="_blank" rel="noopener">https://ftp.gnu.org/gnu/libtool/libtool-1.4.tar.gz</a><br>tar -zxvf libtool-1.4.tar.gz<br>cd libtool-1.4<br>./configure –prefix=/Users/Sinute/local<br>make<br>make install</p>
</blockquote>
<h3 id="安装re2c"><a href="#安装re2c" class="headerlink" title="安装re2c"></a>安装re2c</h3><blockquote>
<p>wget <a href="https://github.com/skvadrik/re2c/releases/download/0.13.6/re2c-0.13.6.tar.gz" target="_blank" rel="noopener">https://github.com/skvadrik/re2c/releases/download/0.13.6/re2c-0.13.6.tar.gz</a><br>tar -zxvf re2c-0.13.6.tar.gz<br>cd re2c-0.13.6<br>./configure –prefix=/Users/Sinute/local<br>make<br>make install</p>
</blockquote>
<p>最后 export PATH=/Users/Sinute/local:$PATH</p>
<h1 id="编译PHP"><a href="#编译PHP" class="headerlink" title="编译PHP"></a>编译PHP</h1><p>从 <a href="http://php.net/releases/" target="_blank" rel="noopener">http://php.net/releases/</a> 下载PHP源代码</p>
<blockquote>
<p>wget <a href="http://museum.php.net/php5/php-5.3.13.tar.gz" target="_blank" rel="noopener">http://museum.php.net/php5/php-5.3.13.tar.gz</a><br>tar -zxvf php-5.3.13.tar.gz<br>cd php-5.3.13<br>./configure –prefix=/Users/Sinute/local –enable-debug –enable-maintainer-zts –enable-fpm<br>make<br>make install</p>
</blockquote>
<p><em>这里带上了–enable-debug, 便于后续开发</em></p>
<p>编译的时候会报 <code>make: *** [ext/dom/node.lo] Error 1</code></p>
<p>解决方法:</p>
<blockquote>
<p>curl -o php-5.3.13.patch <a href="https://mail.gnome.org/archives/xml/2012-August/txtbgxGXAvz4N.txt" target="_blank" rel="noopener">https://mail.gnome.org/archives/xml/2012-August/txtbgxGXAvz4N.txt</a><br>patch -p0 -b &lt; php-5.3.13.patch</p>
</blockquote>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>编译</tag>
      </tags>
  </entry>
  <entry>
    <title>创建第一个PHP扩展</title>
    <url>/2017/01/24/%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AAPHP%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<blockquote>
<p><strong>下面使用的工具和源码都以PHP-5.3.13作为基础 &gt; <a href="/2017/01/24/%E4%BB%8E%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91php-5-3.html">PHP-5.3.13开发环境编译</a></strong></p>
</blockquote>
<p>推荐的教程 <a href="https://github.com/walu/phpbook" target="_blank" rel="noopener">https://github.com/walu/phpbook</a></p>
<a id="more"></a>

<h1 id="编写第一个扩展"><a href="#编写第一个扩展" class="headerlink" title="编写第一个扩展"></a>编写第一个扩展</h1><h3 id="创建文件config-m4"><a href="#创建文件config-m4" class="headerlink" title="创建文件config.m4"></a>创建文件config.m4</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PHP_ARG_ENABLE(</span><br><span class="line">    helloworld,</span><br><span class="line">    [Whether to enable the &quot;helloworld&quot; extension],</span><br><span class="line">    [enable-helloworld        Enable &quot;helloworld&quot; extension support]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">if test $PHP_HELLOWORLD !&#x3D; &quot;no&quot;; then</span><br><span class="line">    PHP_SUBST(HELLOWORLD_SHARED_LIBADD)</span><br><span class="line">    PHP_NEW_EXTENSION(helloworld, helloworld.c, $ext_shared)</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h3 id="创建helloworld-h"><a href="#创建helloworld-h" class="headerlink" title="创建helloworld.h"></a>创建helloworld.h</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HELLOWORLD_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HELLOWORLD_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加载config.h，如果配置了的话</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HAVE_CONFIG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"config.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加载php头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"php.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> phpext_helloworld_ptr &amp;helloworld_module_entry</span></span><br><span class="line"><span class="keyword">extern</span> zend_module_entry helloworld_module_entry;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h3 id="创建helloworld-c"><a href="#创建helloworld-c" class="headerlink" title="创建helloworld.c"></a>创建helloworld.c</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"helloworld.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这边定义了hello_world</span></span><br><span class="line">ZEND_FUNCTION(hello_world)</span><br><span class="line">&#123;</span><br><span class="line">    php_printf(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> zend_function_entry helloworld_functions[] = &#123;</span><br><span class="line">    ZEND_FE(hello_world, <span class="literal">NULL</span>) <span class="comment">// 第一个参数为函数名, 第二个参数为arg_info</span></span><br><span class="line">    <span class="comment">// 可以继续添加</span></span><br><span class="line">    &#123;<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//module entry</span></span><br><span class="line">zend_module_entry helloworld_module_entry = &#123;</span><br><span class="line">#<span class="keyword">if</span> ZEND_MODULE_API_NO &gt;= <span class="number">20010901</span></span><br><span class="line">     STANDARD_MODULE_HEADER,</span><br><span class="line">#endif</span><br><span class="line">    <span class="string">"helloworld"</span>, <span class="comment">//这个地方是扩展名称，往往我们会在这个地方使用一个宏。</span></span><br><span class="line">    helloworld_functions, <span class="comment">/* Functions */</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">/* MINIT */</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">/* MSHUTDOWN */</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">/* RINIT */</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">/* RSHUTDOWN */</span></span><br><span class="line">    <span class="literal">NULL</span>, <span class="comment">/* MINFO */</span></span><br><span class="line">#<span class="keyword">if</span> ZEND_MODULE_API_NO &gt;= <span class="number">20010901</span></span><br><span class="line">    <span class="string">"1.0"</span>, <span class="comment">//这个地方是我们扩展的版本</span></span><br><span class="line">#endif</span><br><span class="line">    STANDARD_MODULE_PROPERTIES</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> COMPILE_DL_HELLOWORLD</span></span><br><span class="line">ZEND_GET_MODULE(helloworld)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h1 id="编译扩展"><a href="#编译扩展" class="headerlink" title="编译扩展"></a>编译扩展</h1><blockquote>
<p>phpize<br>./configure<br>make</p>
</blockquote>
<p>然后就可以在 modules 目录下找到对应的 <code>helloworld.so</code></p>
<h1 id="加载扩展"><a href="#加载扩展" class="headerlink" title="加载扩展"></a>加载扩展</h1><p>在 <code>php.ini</code> 中加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension_dir&#x3D;PATH&#x2F;TO&#x2F;EXTENSION</span><br><span class="line">extension&#x3D;helloworld.so</span><br></pre></td></tr></table></figure>

<h1 id="检查是否成功"><a href="#检查是否成功" class="headerlink" title="检查是否成功"></a>检查是否成功</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php -r <span class="string">'hello_world();'</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>扩展</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库主从同步</title>
    <url>/2018/02/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<blockquote>
<p><strong>环境</strong><br>CentOS 8<br>MariaDB 10.3.17</p>
</blockquote>
<h1 id="主库操作"><a href="#主库操作" class="headerlink" title="主库操作"></a>主库操作</h1><h2 id="修改主库配置"><a href="#修改主库配置" class="headerlink" title="修改主库配置"></a>修改主库配置</h2><blockquote>
<p>/etc/my.cnf.d/mariadb-server.cnf</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启binlog</span></span><br><span class="line">[mysqld]</span><br><span class="line">server-id = 1</span><br><span class="line">binlog_format = mixed</span><br><span class="line"><span class="built_in">log</span>-bin = mysql-bin</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="重启数据库"><a href="#重启数据库" class="headerlink" title="重启数据库"></a>重启数据库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">service mariadb restart</span><br></pre></td></tr></table></figure>

<h2 id="创建同步账户"><a href="#创建同步账户" class="headerlink" title="创建同步账户"></a>创建同步账户</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'user'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure>

<h2 id="备份主库"><a href="#备份主库" class="headerlink" title="备份主库"></a>备份主库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysqldump --routines --single_transaction --master-data=2 --databases xxx &gt; backup.sql</span><br></pre></td></tr></table></figure>

<h1 id="从库操作"><a href="#从库操作" class="headerlink" title="从库操作"></a>从库操作</h1><h2 id="修改从库配置"><a href="#修改从库配置" class="headerlink" title="修改从库配置"></a>修改从库配置</h2><blockquote>
<p>/etc/my.cnf.d/mariadb-server.cnf</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id = 2</span><br><span class="line">relay-log = relay-bin</span><br><span class="line">read_only = on</span><br><span class="line"><span class="comment"># binlog_do_db = db1</span></span><br><span class="line"><span class="comment"># binlog_do_db = db2</span></span><br><span class="line">binlog_ignore_db=mysql</span><br><span class="line">binlog_ignore_db=performance_schema</span><br><span class="line">binlog_ignore_db=information_schema</span><br></pre></td></tr></table></figure>

<h2 id="重启数据库-1"><a href="#重启数据库-1" class="headerlink" title="重启数据库"></a>重启数据库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">service mariadb restart</span><br></pre></td></tr></table></figure>

<h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql &lt; backup.sql</span><br></pre></td></tr></table></figure>

<h2 id="确认同步位置"><a href="#确认同步位置" class="headerlink" title="确认同步位置"></a>确认同步位置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">head -n50 backup.sql</span><br></pre></td></tr></table></figure>

<p>找到类似 <code>CHANGE MASTER TO MASTER_LOG_FILE=&#39;mysql-bin.000025&#39;, MASTER_LOG_POS=1244342;</code></p>
<h2 id="设置同步账户密码以及同步位置"><a href="#设置同步账户密码以及同步位置" class="headerlink" title="设置同步账户密码以及同步位置"></a>设置同步账户密码以及同步位置</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">change</span> <span class="keyword">master</span> <span class="keyword">to</span></span><br><span class="line">master_host=<span class="string">'master_host'</span>,</span><br><span class="line">master_user=<span class="string">'user'</span>,</span><br><span class="line">master_password=<span class="string">'password'</span>,</span><br><span class="line">master_port=<span class="number">3306</span>,</span><br><span class="line">master_log_file=<span class="string">'mysql-bin.000025'</span>,</span><br><span class="line">master_log_pos=<span class="number">1244342</span>;</span><br></pre></td></tr></table></figure>

<h2 id="启动同步"><a href="#启动同步" class="headerlink" title="启动同步"></a>启动同步</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="keyword">slave</span>;</span><br></pre></td></tr></table></figure>

<h2 id="检查同步状态"><a href="#检查同步状态" class="headerlink" title="检查同步状态"></a>检查同步状态</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">slave</span> <span class="keyword">status</span>;</span><br></pre></td></tr></table></figure>

<p>确认 <code>Slave_IO_Running</code> 以及 <code>Slave_SQL_Running</code> 是否都为 <code>Yes</code></p>
<h1 id="其他问题排除"><a href="#其他问题排除" class="headerlink" title="其他问题排除"></a>其他问题排除</h1><ul>
<li>出现 <code>Slave_IO_Running: Connecting</code>，且 <code>Last_IO_Errno: 2003</code></li>
</ul>
<ol>
<li>网络是否正常</li>
<li>密码是否正确</li>
<li>MASTER_LOG_POS是否正确</li>
<li>是否被SELinux策略阻止</li>
</ol>
<p>1和2可以在从库服务器上直接通过手动使用同步账号连接主库，检查是否可以登陆<br>3需要确认 <code>backup.sql</code> 中的位置和设置同步时的位置是否相同<br>4可以通过 <code>setenforce 0</code> 临时关闭SELinux，永久关闭修改 <code>/etc/selinux/config</code> 中，<code>SELINUX=disabled</code></p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
        <tag>主从</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL自定义函数</title>
    <url>/2018/04/04/MySQL%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> myFunc $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> myFunc(<span class="keyword">str</span> <span class="built_in">varchar</span>(<span class="number">255</span>),<span class="built_in">number</span> <span class="built_in">bigint</span> <span class="keyword">unsigned</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="built_in">bigint</span>(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> x <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> x = (</span><br><span class="line">    <span class="keyword">CASE</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="keyword">str</span>=<span class="string">'test'</span> <span class="keyword">and</span> <span class="built_in">number</span> = <span class="number">1</span> <span class="keyword">THEN</span> <span class="number">233</span></span><br><span class="line">        <span class="keyword">WHEN</span> <span class="keyword">str</span>=<span class="string">'hello'</span> <span class="keyword">and</span> <span class="built_in">number</span> = <span class="number">2</span> <span class="keyword">THEN</span> <span class="number">123</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">END</span></span><br><span class="line">);</span><br><span class="line">RETURN x;</span><br><span class="line"><span class="keyword">END</span> $$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> myFunc(<span class="string">'test'</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>命令行处理图片</title>
    <url>/2019/04/09/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install imagemagick jpegoptim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按比例调整尺寸</span></span><br><span class="line">convert -resize 85%x85% test.jpg test_resize.jpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按长宽调整尺寸</span></span><br><span class="line">convert -resize 1920x1080 test.jpg test_resize.jpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按长宽调整尺寸，保持原始比例</span></span><br><span class="line">convert -resize 1920x test.jpg test_resize.jpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩图片质量 (80%)</span></span><br><span class="line">jpegoptim --max=80 --dest=test_opt.jpg test.jpg </span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩到指定大小 (512kb)</span></span><br><span class="line">jpegoptim --size=512 --dest=test_opt.jpg test.jpg</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>图片</tag>
        <tag>处理</tag>
        <tag>命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN迁移到GIT</title>
    <url>/2019/04/02/SVN%E8%BF%81%E7%A7%BB%E5%88%B0GIT/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>一个使用svn做版本控制的老业务需要迁移到git，原有业务和其他多个业务一同放在一个大的svn仓库中，本次仅需要迁移该业务。目标是迁移到git后保留历史的提交信息，不需要保留svn分支，也不需要保留svn标签。</p>
<p>网上查阅了一些资料后发现git官方已经提供了<a href="https://git-scm.com/book/zh/v1/Git-%E4%B8%8E%E5%85%B6%E4%BB%96%E7%B3%BB%E7%BB%9F-%E8%BF%81%E7%A7%BB%E5%88%B0-Git" target="_blank" rel="noopener">迁移教程</a></p>
<a id="more"></a>

<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><blockquote>
<p>以 <a href="https://sourceforge.net/p/keepass/code/HEAD/tree/" target="_blank" rel="noopener">https://sourceforge.net/p/keepass/code/HEAD/tree/</a> 这个项目为例，迁移 <code>trunk</code> 下 <code>Plugins</code> 仓库</p>
</blockquote>
<h4 id="安装git-svn"><a href="#安装git-svn" class="headerlink" title="安装git-svn"></a>安装git-svn</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install git-svn</span><br></pre></td></tr></table></figure>

<h4 id="创建svn和git的用户映射关系"><a href="#创建svn和git的用户映射关系" class="headerlink" title="创建svn和git的用户映射关系"></a>创建svn和git的用户映射关系</h4><p>推荐的做法是先从svn的log中导出所有用户，然后再编辑每个用户到git的映射关系</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先检出仓库</span></span><br><span class="line">svn checkout https://svn.code.sf.net/p/keepass/code/trunk/Plugins keepass-code-plugins.svn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出所有用户</span></span><br><span class="line">svn <span class="built_in">log</span> keepass-code-plugins.svn --xml | grep -P <span class="string">"^&lt;author"</span> | sort -u | perl -pe <span class="string">'s/&lt;author&gt;(.*?)&lt;\/author&gt;/$1 = /'</span> &gt; users.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据导出的users.txt编辑每个用户的映射关系</span></span><br><span class="line"><span class="comment"># 原始文件</span></span><br><span class="line">&gt; cat users.txt</span><br><span class="line">bill-rubin =</span><br><span class="line">eyebex =</span><br><span class="line"><span class="comment"># 映射后</span></span><br><span class="line">&gt; cat users.txt</span><br><span class="line">bill-rubin = <span class="built_in">test</span> &lt;<span class="built_in">test</span>@test.com&gt;</span><br><span class="line">eyebex = test2 &lt;test2@test.com&gt;</span><br></pre></td></tr></table></figure>

<h4 id="导入git"><a href="#导入git" class="headerlink" title="导入git"></a>导入git</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git svn <span class="built_in">clone</span> https://svn.code.sf.net/p/keepass/code/trunk/Plugins --authors-file=users.txt --no-metadata keepass-code-plugins.git</span><br></pre></td></tr></table></figure>

<h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git --git-dir=keepass-code-plugins.git/.git <span class="keyword">for</span>-each-ref refs/remotes | cut -d / -f 3- | grep -v @ | <span class="keyword">while</span> <span class="built_in">read</span> branchname; <span class="keyword">do</span> git --git-dir=keepass-code-plugins.git/.git branch <span class="string">"<span class="variable">$branchname</span>"</span> <span class="string">"refs/remotes/<span class="variable">$branchname</span>"</span>; git --git-dir=keepass-code-plugins.git/.git branch -r -d <span class="string">"<span class="variable">$branchname</span>"</span>; git --git-dir=keepass-code-plugins.git/.git branch -d <span class="string">"<span class="variable">$branchname</span>"</span> ; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h4 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git --git-dir=keepass-code-plugins.git/.git <span class="keyword">for</span>-each-ref refs/remotes/tags | cut -d / -f 4- | grep -v @ | <span class="keyword">while</span> <span class="built_in">read</span> tagname; <span class="keyword">do</span> git --git-dir=keepass-code-plugins.git/.git tag <span class="string">"<span class="variable">$tagname</span>"</span> <span class="string">"tags/<span class="variable">$tagname</span>"</span>; git --git-dir=keepass-code-plugins.git/.git branch -r -d <span class="string">"tags/<span class="variable">$tagname</span>"</span>; git --git-dir=keepass-code-plugins.git/.git branch -d <span class="string">"tags/<span class="variable">$tagname</span>"</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h4 id="对比差异"><a href="#对比差异" class="headerlink" title="对比差异"></a>对比差异</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">diff -x <span class="string">'.git'</span> -x <span class="string">'.svn'</span> -r keepass-code-plugins.svn keepass-code-plugins.git</span><br></pre></td></tr></table></figure>

<h4 id="设置远端仓库"><a href="#设置远端仓库" class="headerlink" title="设置远端仓库"></a>设置远端仓库</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git --git-dir=keepass-code-plugins.git/.git remote add origin git@github.com:Sinute/keepass-code-plugins.git</span><br></pre></td></tr></table></figure>

<h4 id="推送到远端"><a href="#推送到远端" class="headerlink" title="推送到远端"></a>推送到远端</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git --git-dir=keepass-code-plugins.git/.git push -u origin master</span><br></pre></td></tr></table></figure>

<h2 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h2><p>在git中空目录无法被追踪，如果svn仓库中存在空目录（比如log目录），需要视情况添加 <code>.gitignore</code> 或 <code>.gitkeep</code></p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title>UML类图关系</title>
    <url>/2019/04/15/UML%E7%B1%BB%E5%9B%BE%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<h2 id="成员"><a href="#成员" class="headerlink" title="成员"></a>成员</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+	公共</span><br><span class="line">-	私有</span><br><span class="line">#	保护</span><br><span class="line">~	包（即对包内其他成员可见）</span><br><span class="line">&#x2F;	推導（即由其他屬性推導得出，不需要直接給定其值）</span><br><span class="line">_	静态</span><br></pre></td></tr></table></figure>

<h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><h4 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h4><p>泛化（Generalization），即继承的反方向，指的是一个类（称为父类、父接口）具有另外的一个（或一些）类（称为子类、子接口）的共有功能。子类可视为其父类的特例，并可以增加新功能。用带空心三角形箭头的实线表示。</p>
<p><img src="https://img.nichijou.me/20190417231427.png" alt=""></p>
<a id="more"></a>

<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>实现（Realization）指的是一个class类实现interface接口（可以是多个）的功能；在Java中此类关系通过关键字implements明确标识。用带空心三角形箭头的虚线表示。</p>
<p><img src="https://img.nichijou.me/20190417231508.png" alt=""></p>
<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>依赖关系（Dependency）可以简单的理解为一个类A使用到了另一个类B，” … uses a …”，被依赖的对象只是作为一种工具在使用，而并不持有对它的引用。而这种使用关系是具有偶然性、临时性的、非常弱的，但是B类的变化会影响到A；表现在代码层面，为类B作为参数被类A在某个method（方法）中使用。用带燕尾箭头的虚线表示。表示一个类依赖于另外一个类的定义；依赖关系仅仅描述了类与类之间的一种使用与被使用的关系。</p>
<p><img src="https://img.nichijou.me/20190417231534.png" alt=""></p>
<h4 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h4><p>一个关联（Association）代表一个家族的联系。关联可以命名，可以饰以角色名称，有权指针，多重性，可视性，以及其他属性（如相互关联和有方向的（带燕尾箭头的实线表示）关联）。在语义上是两个类之间、或类与接口之间一种强依赖关系，是一种长期的稳定的关系，” … has a …” 。关联关系使一个类知道另外一个类的属性和方法；通常含有“知道”、“了解”的含义。某个对象会长期的持有另一个对象的引用，关联的两个对象彼此间没有任何强制性的约束，只要二者同意，可以随时解除关系或是进行关联，它们在生命期问题上没有任何约定。被关联的对象还可以再被别的对象关联，所以关联是可以共享的。 在代码层面上，被关联类以类属性的形式出现在关联类中，也可能是关联类引用了一个类型为被关联类的全局变量。当前定义有五种不同类型的关联。双向（Bi-directional）和单向（uni-directional）的关联是最常见的。</p>
<p><img src="https://img.nichijou.me/20190417231558.png" alt=""></p>
<h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><p>聚合（Aggregate）是表示整体与部分的一类特殊的关联关系，是“弱”的包含（” … owns a …” ）关系，成分类可以不依靠聚合类而单独存在，可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享（sharable）。例如，池塘与（池塘中的）鸭子。再例如教授与课程就是一种聚合关系。又例如图书馆包含(owns a) 学生和书籍。即使没有图书馆，学生亦可以存在，学生和图书馆之间的关系是聚集。聚集可能不涉及两个以上的类。图形以空心的菱形箭尾与实线来表示。</p>
<p><img src="https://img.nichijou.me/20190417231628.png" alt=""></p>
<h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><p>组成（Composition）关系，是一类“强”的整体与部分的包含关系（” … is a part of …”）。成分类必须依靠合成类而存在。整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束。合成类别完全拥有成分类别，负责创建、销毁成分类别。例如汽车与化油器，又例如公司与公司部门就是一种组成关系。图形以实心的菱形箭尾与实线表示。</p>
<p><img src="https://img.nichijou.me/20190417231647.png" alt=""></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://en.wikipedia.org/wiki/Class_diagram" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Class_diagram</a></p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP实现18位社会统一信用码验证</title>
    <url>/2019/04/17/PHP%E5%AE%9E%E7%8E%B018%E4%BD%8D%E7%A4%BE%E4%BC%9A%E7%BB%9F%E4%B8%80%E4%BF%A1%E7%94%A8%E7%A0%81%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<h2 id="什么是社会统一信用码"><a href="#什么是社会统一信用码" class="headerlink" title="什么是社会统一信用码"></a>什么是社会统一信用码</h2><p><a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E7%A4%BE%E4%BC%9A%E4%BF%A1%E7%94%A8%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener"><strong>统一社会信用代码</strong></a>是中国的法人和其他组织，在全国范围内唯一的、终身不变的18位法定身份识别码，旨在统一过去各部门下发的不同机构代码，由全国组织机构统一社会信用代码数据服务中心（NACAO，隶属<a href="https://zh.wikipedia.org/wiki/%E5%9B%BD%E5%AE%B6%E5%B8%82%E5%9C%BA%E7%9B%91%E7%9D%A3%E7%AE%A1%E7%90%86%E6%80%BB%E5%B1%80" target="_blank" rel="noopener">国家市场监督管理总局</a>）负责管理。</p>
<p>2015年6月11日国务院下发《国务院关于批转发展改革委等部门法人和其他组织统一社会信用代码制度建设总体方案的通知》（国发〔2015〕33号）后开始实施。</p>
<a id="more"></a>

<h2 id="信用码构成"><a href="#信用码构成" class="headerlink" title="信用码构成"></a>信用码构成</h2><p><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E5%9B%BD%E5%AE%B6%E6%A0%87%E5%87%86" target="_blank" rel="noopener">中华人民共和国国家标准</a><a href="https://zh.wikisource.org/wiki/GB_32100-2015_%E6%B3%95%E4%BA%BA%E5%92%8C%E5%85%B6%E4%BB%96%E7%BB%84%E7%BB%87%E7%BB%9F%E4%B8%80%E7%A4%BE%E4%BC%9A%E4%BF%A1%E7%94%A8%E4%BB%A3%E7%A0%81%E7%BC%96%E7%A0%81%E8%A7%84%E5%88%99" target="_blank" rel="noopener">GB 32100-2015 法人和其他组织统一社会信用代码编码规则</a>中规定：统一代码由十八位的阿拉伯数字或大写英文字母（不使用I、O、Z、S、V）组成。</p>
<p>18位数字字母组合的方式是：</p>
<p><img src="https://img.nichijou.me/20190417230234.png" alt=""></p>
<ul>
<li><strong>登记管理部门码</strong>表示登记管理部分，使用阿拉伯数字或大写英文字母表示，1代表机构编制、5代表民政、9代表工商、Y代表其他。</li>
<li><strong>机构类别码</strong>表示登记机构的类别。</li>
<li><strong>登记管理机关行政区划码</strong>指的是登记机构所地的<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%88%92%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener">行政区划代码</a>，如350100是福建省福州市。</li>
<li><strong>主体标识码（组织机构代码）</strong>是旧的组织机构代码，按照<a href="https://zh.wikisource.org/wiki/GB_11714-1997_%E5%85%A8%E5%9B%BD%E7%BB%84%E7%BB%87%E6%9C%BA%E6%9E%84%E4%BB%A3%E7%A0%81%E7%BC%96%E5%88%B6%E8%A7%84%E5%88%99" target="_blank" rel="noopener">GB 11714</a>编码。</li>
<li>最后一位是<strong>校验码</strong>，校验码计算方法参照GB/T 17710（采ISO 7064）。</li>
</ul>
<h2 id="编码规则"><a href="#编码规则" class="headerlink" title="编码规则"></a>编码规则</h2><p><a href="https://zh.wikisource.org/zh-hans/GB_32100-2015_法人和其他组织统一社会信用代码编码规则" target="_blank" rel="noopener">GB_32100-2015</a></p>
<h2 id="PHP实现"><a href="#PHP实现" class="headerlink" title="PHP实现"></a>PHP实现</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://zh.wikisource.org/zh-hans/GB_32100-2015_法人和其他组织统一社会信用代码编码规则</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateUnifiedSocialCreditIdentifier</span><span class="params">($code)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">'~^[0-9ABCDEFGHJKLMNPQRTUWXY]&#123;18&#125;$~'</span>, $code)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $code = strtoupper($code);</span><br><span class="line">    <span class="comment">// 18位统一社会信用代码不使用I、O、Z、S、V这五个英文字母</span></span><br><span class="line">    $alphaMap = [</span><br><span class="line">        <span class="string">'0'</span> =&gt; <span class="number">0</span>, <span class="string">'1'</span>  =&gt; <span class="number">1</span>, <span class="string">'2'</span>  =&gt; <span class="number">2</span>, <span class="string">'3'</span>  =&gt; <span class="number">3</span>, <span class="string">'4'</span>  =&gt; <span class="number">4</span>,</span><br><span class="line">        <span class="string">'5'</span> =&gt; <span class="number">5</span>, <span class="string">'6'</span>  =&gt; <span class="number">6</span>, <span class="string">'7'</span>  =&gt; <span class="number">7</span>, <span class="string">'8'</span>  =&gt; <span class="number">8</span>, <span class="string">'9'</span>  =&gt; <span class="number">9</span>,</span><br><span class="line">        <span class="string">'A'</span> =&gt; <span class="number">10</span>, <span class="string">'B'</span> =&gt; <span class="number">11</span>, <span class="string">'C'</span> =&gt; <span class="number">12</span>, <span class="string">'D'</span> =&gt; <span class="number">13</span>, <span class="string">'E'</span> =&gt; <span class="number">14</span>,</span><br><span class="line">        <span class="string">'F'</span> =&gt; <span class="number">15</span>, <span class="string">'G'</span> =&gt; <span class="number">16</span>, <span class="string">'H'</span> =&gt; <span class="number">17</span>, <span class="string">'J'</span> =&gt; <span class="number">18</span>, <span class="string">'K'</span> =&gt; <span class="number">19</span>,</span><br><span class="line">        <span class="string">'L'</span> =&gt; <span class="number">20</span>, <span class="string">'M'</span> =&gt; <span class="number">21</span>, <span class="string">'N'</span> =&gt; <span class="number">22</span>, <span class="string">'P'</span> =&gt; <span class="number">23</span>, <span class="string">'Q'</span> =&gt; <span class="number">24</span>,</span><br><span class="line">        <span class="string">'R'</span> =&gt; <span class="number">25</span>, <span class="string">'T'</span> =&gt; <span class="number">26</span>, <span class="string">'U'</span> =&gt; <span class="number">27</span>, <span class="string">'W'</span> =&gt; <span class="number">28</span>, <span class="string">'X'</span> =&gt; <span class="number">29</span>,</span><br><span class="line">        <span class="string">'Y'</span> =&gt; <span class="number">30</span>,</span><br><span class="line">    ];</span><br><span class="line">    $weight = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">29</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">28</span>];</span><br><span class="line">    $chrs   = str_split($code);</span><br><span class="line">    $sum    = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (array_slice($chrs, <span class="number">0</span>, <span class="number">17</span>) <span class="keyword">as</span> $index =&gt; $chr) &#123;</span><br><span class="line">        $sum += $alphaMap[$chr] * $weight[$index];</span><br><span class="line">    &#125;</span><br><span class="line">    $checkNum     = <span class="number">31</span> - ($sum % <span class="number">31</span>);</span><br><span class="line">    $checkNum     = $checkNum == <span class="number">31</span> ? <span class="number">0</span> : $checkNum;</span><br><span class="line">    $flipAlphaMap = array_flip($alphaMap);</span><br><span class="line">    <span class="keyword">return</span> $chrs[<span class="number">17</span>] === (string) $flipAlphaMap[$checkNum];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var_dump(true === validateUnifiedSocialCreditIdentifier('91310000736228569K')); // true</span></span><br><span class="line"><span class="comment">// var_dump(true === validateUnifiedSocialCreditIdentifier('91310115MA1K3M5G6H')); // true</span></span><br><span class="line"><span class="comment">// var_dump(true === validateUnifiedSocialCreditIdentifier('91310112MA1GBEGY17')); // true</span></span><br><span class="line"><span class="comment">// var_dump(true === validateUnifiedSocialCreditIdentifier('91310000MA1FL5DR4T')); // true</span></span><br><span class="line"><span class="comment">// var_dump(false === validateUnifiedSocialCreditIdentifier('11310000MA1FL5DR4T')); // true</span></span><br></pre></td></tr></table></figure>

<h2 id="错码问题"><a href="#错码问题" class="headerlink" title="错码问题"></a>错码问题</h2><p><strong>实际情况中存在少量社会统一信用码错码问题，比如：</strong></p>
<blockquote>
<p>福建思企互联网信息服务有限公司 (91350103M0001JFDX6)</p>
</blockquote>
<p><img src="https://img.nichijou.me/20190417230913.png" alt=""></p>
<blockquote>
<p>福州禾力顺电子商务有限公司 (91350102M0001PU72B)</p>
</blockquote>
<p><img src="https://img.nichijou.me/20190417231030.png" alt=""></p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>社会统一信用码</tag>
        <tag>验证</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang中的break label</title>
    <url>/2019/04/20/Golang%E4%B8%AD%E7%9A%84break-label/</url>
    <content><![CDATA[<p>在Golang中，支持通过 <code>break</code> 的方式跳出循环。如果需要跳出多层循环，可以使用 <code>break label</code> 的方式实现。</p>
<p>不同于 <code>goto label</code>， <code>break label</code> 会在循环的下一条语句处开始继续执行，而 <code>goto label</code> 则会从 <code>label</code> 处继续往下执行。如果在下面的例子中把 <code>break label</code> 换成 <code>goto label</code>，则会导致再次进入循环。</p>
<a id="more"></a>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">TestLabelBreak:</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		fmt.Println(i)</span><br><span class="line">		<span class="keyword">if</span> i == <span class="number">3</span> &#123;</span><br><span class="line">			<span class="keyword">break</span> TestLabelBreak</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"end for"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// end for</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>label</tag>
      </tags>
  </entry>
  <entry>
    <title>在PHP单元测试中Mock time 以及 date 等预置函数</title>
    <url>/2019/05/07/%E5%9C%A8PHP%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B8%ADMock-time-%E4%BB%A5%E5%8F%8A-date-%E7%AD%89%E9%A2%84%E7%BD%AE%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在单元测试时，有时候会碰到代码中使用了 <code>time</code>， <code>date</code> 等函数，然后根据这些函数的返回执行不同的分支。</p>
<p>这种情况下想要覆盖到所有分支，可以通过在相同命名空间下定义同名函数，来达到mock的目的</p>
<a id="more"></a>

<p>例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 待测代码</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">foo</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (time() &gt;= strtotime(<span class="string">'2019-01-01'</span>)) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单元测试</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">foo</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">time</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strtotime(<span class="string">'2018-01-01'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考 <a href="https://stackoverflow.com/a/5337635" target="_blank" rel="noopener">https://stackoverflow.com/a/5337635</a></p>
</blockquote>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>phpunit</tag>
        <tag>单元测试</tag>
        <tag>mock</tag>
        <tag>date</tag>
        <tag>time</tag>
        <tag>预置函数</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac外接2k显示器开启HiDPI支持</title>
    <url>/2019/05/13/Mac%E5%A4%96%E6%8E%A52k%E6%98%BE%E7%A4%BA%E5%99%A8%E5%BC%80%E5%90%AFHiDPI%E6%94%AF%E6%8C%81/</url>
    <content><![CDATA[<h2 id="关闭SIP-System-Integrity-Protection"><a href="#关闭SIP-System-Integrity-Protection" class="headerlink" title="关闭SIP(System Integrity Protection)"></a>关闭SIP(System Integrity Protection)</h2><ol>
<li>关机</li>
<li>按住 <code>command+R</code> 开机</li>
<li>实用工具 -&gt; 终端</li>
<li>输入 <code>csrutil disable</code>，回车</li>
<li>重启系统</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-bash-3.2<span class="comment"># csrutil disable</span></span><br><span class="line">Successfully disabled System Integrity Protection. Please restart the machine <span class="keyword">for</span> the changes to take effect.</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="获取显示器DisplayVendorID和DisplayProductID"><a href="#获取显示器DisplayVendorID和DisplayProductID" class="headerlink" title="获取显示器DisplayVendorID和DisplayProductID"></a>获取显示器DisplayVendorID和DisplayProductID</h2><p>终端执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ioreg -l | grep <span class="string">"DisplayVendorID"</span></span><br><span class="line">ioreg -l | grep <span class="string">"DisplayProductID"</span></span><br></pre></td></tr></table></figure>

<p>记下 <code>DisplayVendorID</code> 和 <code>DisplayProductID</code></p>
<h2 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h2><blockquote>
<p><a href="https://comsysto.github.io/Display-Override-PropertyList-File-Parser-and-Generator-with-HiDPI-Support-For-Scaled-Resolutions/" target="_blank" rel="noopener">https://comsysto.github.io/Display-Override-PropertyList-File-Parser-and-Generator-with-HiDPI-Support-For-Scaled-Resolutions/</a></p>
</blockquote>
<p>在上面的地址填上刚才得到的 <code>DisplayVendorID</code> 和 <code>DisplayProductID</code>，得到配置和文件路径，把配置放到对应的路径</p>
<p><img src="https://img.nichijou.me/20191231003626.png" alt=""></p>
<h2 id="开启SIP-System-Integrity-Protection"><a href="#开启SIP-System-Integrity-Protection" class="headerlink" title="开启SIP(System Integrity Protection)"></a>开启SIP(System Integrity Protection)</h2><ol>
<li>关机</li>
<li>按住 <code>command+R</code> 开机</li>
<li>实用工具 -&gt; 终端</li>
<li>输入 <code>csrutil enable</code>，回车</li>
<li>重启系统</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-bash-3.2<span class="comment"># csrutil enable</span></span><br><span class="line">Successfully enabled System Integrity Protection. Please restart the machine <span class="keyword">for</span> the changes to take effect.</span><br></pre></td></tr></table></figure>

<h2 id="下载RDM"><a href="#下载RDM" class="headerlink" title="下载RDM"></a>下载RDM</h2><blockquote>
<p><a href="http://avi.alkalay.net/software/RDM/" target="_blank" rel="noopener">http://avi.alkalay.net/software/RDM/</a></p>
</blockquote>
<p>打开并选择需要的分辨率即可</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>HiDPI</tag>
        <tag>2k</tag>
        <tag>分辨率</tag>
        <tag>显示器</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP调用curl设置CURLOPT_TIMEOUT_MS小于1秒时无效</title>
    <url>/2019/05/13/PHP%E8%B0%83%E7%94%A8curl%E8%AE%BE%E7%BD%AECURLOPT-TIMEOUT-MS%E5%B0%8F%E4%BA%8E1%E7%A7%92%E6%97%B6%E6%97%A0%E6%95%88/</url>
    <content><![CDATA[<p>今天使用php调用curl时碰到一个奇怪的问题，现象为当CURLOPT_TIMEOUT_MS小于1000时，直接返回错误</p>
<p>代码如下：</p>
<a id="more"></a>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$ch = curl_init(<span class="string">'https://nichijou.me/'</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// curl_setopt($ch, CURLOPT_NOSIGNAL, 1);</span></span><br><span class="line">curl_setopt($ch, CURLOPT_TIMEOUT_MS, <span class="number">200</span>);</span><br><span class="line">$data = curl_exec($ch);</span><br><span class="line">$curl_errno = curl_errno($ch);</span><br><span class="line">$curl_error = curl_error($ch);</span><br><span class="line">curl_close($ch);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($curl_errno &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"cURL Error ($curl_errno): $curl_error\n"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Data received: $data\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cURL Error (28): Timeout was reached</span></span><br></pre></td></tr></table></figure>

<p>翻了一下文档</p>
<blockquote>
<p><a href="https://www.php.net/manual/zh/function.curl-setopt.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/function.curl-setopt.php</a></p>
</blockquote>
<table>
<thead>
<tr>
<th><strong>选项</strong></th>
<th>将 <code>value</code> 设置为</th>
<th><strong>备注</strong></th>
</tr>
</thead>
<tbody><tr>
<td>CURLOPT_TIMEOUT_MS</td>
<td>设置cURL允许执行的最长毫秒数。 如果 libcurl 编译时使用系统标准的名称解析器（ standard system name resolver），那部分的连接仍旧使用以秒计的超时解决方案，最小超时时间还是一秒钟。</td>
<td>在 cURL 7.16.2 中被加入。从 PHP 5.2.3 起可使用。</td>
</tr>
</tbody></table>
<p>查解决办法的时候发现鸟哥早在14年就描述过这个问题</p>
<blockquote>
<p><a href="http://www.laruence.com/2014/01/21/2939.html" target="_blank" rel="noopener">http://www.laruence.com/2014/01/21/2939.html</a></p>
</blockquote>
<p>解决这个问题的几种方式: </p>
<ol>
<li>设置 <code>curl_setopt($ch, CURLOPT_NOSIGNAL, 1);</code>，但是会导致DNS解析不受控，万一DNS服务器出问题，可能会导致服务超时</li>
<li>升级libcurl版本到7.19及以上</li>
</ol>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>公钥私钥对生成</title>
    <url>/2019/10/30/%E9%80%9A%E8%BF%87%E7%A7%81%E9%92%A5%E7%94%9F%E6%88%90%E5%85%AC%E9%92%A5/</url>
    <content><![CDATA[<h2 id="生成公钥私钥对"><a href="#生成公钥私钥对" class="headerlink" title="生成公钥私钥对"></a>生成公钥私钥对</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>

<h2 id="通过私钥生成公钥"><a href="#通过私钥生成公钥" class="headerlink" title="通过私钥生成公钥"></a>通过私钥生成公钥</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -y -f id_rsa &gt; id_rsa.pub</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang中使用Protobuf</title>
    <url>/2019/12/22/Golang%E4%B8%AD%E4%BD%BF%E7%94%A8Protobuf/</url>
    <content><![CDATA[<h2 id="安装protoc"><a href="#安装protoc" class="headerlink" title="安装protoc"></a>安装protoc</h2><p><code>https://github.com/protocolbuffers/protobuf/releases</code> 下载对应版本的protoc</p>
<h2 id="安装protoc-gen-go"><a href="#安装protoc-gen-go" class="headerlink" title="安装protoc-gen-go"></a>安装protoc-gen-go</h2><blockquote>
<p><a href="https://godoc.org/github.com/golang/protobuf/protoc-gen-go" target="_blank" rel="noopener">https://godoc.org/github.com/golang/protobuf/protoc-gen-go</a></p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">go get github.com/golang/protobuf/protoc-gen-go</span><br></pre></td></tr></table></figure>

<h2 id="生成go文件"><a href="#生成go文件" class="headerlink" title="生成go文件"></a>生成go文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">protoc --go_out=output_directory input_directory/file.proto</span><br></pre></td></tr></table></figure>

<h2 id="proto文件编写"><a href="#proto文件编写" class="headerlink" title="proto文件编写"></a>proto文件编写</h2><p><a href="https://developers.google.com/protocol-buffers/docs/proto3" target="_blank" rel="noopener">原文</a><br><a href="https://blog.csdn.net/u011518120/article/details/54604615" target="_blank" rel="noopener">译文</a></p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>protobuf</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下各项代理设置</title>
    <url>/2019/12/31/Linux%E4%B8%8B%E5%90%84%E9%A1%B9%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h2><p><strong>设置</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只对github生效</span></span><br><span class="line">git config --global http.https://github.com.proxy socks5://127.0.0.1:1080</span><br><span class="line"><span class="comment"># 对所有生效</span></span><br><span class="line">git config --global http.proxy http://127.0.0.1:8118</span><br><span class="line">git config --global https.proxy http://127.0.0.1:8118</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><strong>取消</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只对github生效</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.https://github.com.proxy</span><br><span class="line"><span class="comment"># 对所有生效</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>

<h2 id="WGET"><a href="#WGET" class="headerlink" title="WGET"></a>WGET</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat ~/.wgetrc</span></span><br><span class="line">use_proxy=yes</span><br><span class="line">http_proxy=http://127.0.0.1:8118</span><br><span class="line">https_proxy=http://127.0.0.1:8118</span><br><span class="line">no_proxy=<span class="string">".local"</span></span><br></pre></td></tr></table></figure>

<h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><p><strong>设置</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:8118</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:8118</span><br><span class="line"><span class="built_in">export</span> no_proxy=<span class="string">".local"</span></span><br></pre></td></tr></table></figure>

<p><strong>取消</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> http_proxy</span><br><span class="line"><span class="built_in">unset</span> https_proxy</span><br><span class="line"><span class="built_in">unset</span> no_proxy</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL分区使用</title>
    <url>/2019/12/31/MySQL%E5%88%86%E5%8C%BA%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p><strong>LIST分区</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`test`</span> (</span><br><span class="line">  <span class="string">`date`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'date'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`date`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">LIST</span> (<span class="string">`date`</span>)</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">PARTITION</span> P_20191201 <span class="keyword">VALUES</span> <span class="keyword">IN</span> (<span class="number">20191201</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><strong>RANGE分区</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`test`</span> (</span><br><span class="line">  <span class="string">`date`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'date'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`date`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span> (<span class="string">`date`</span>)</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">PARTITION</span> P_20191201 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="number">20191202</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>HASH分区</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`test`</span> (</span><br><span class="line">  <span class="string">`date`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'date'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`date`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">HASH</span> (<span class="string">`date`</span>)</span><br><span class="line"><span class="keyword">PARTITIONS</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`test`</span> <span class="keyword">ADD</span> <span class="keyword">PARTITION</span> (</span><br><span class="line">  <span class="keyword">PARTITION</span> P_20191202 <span class="keyword">VALUES</span> <span class="keyword">IN</span> (<span class="number">20191202</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`test`</span> <span class="keyword">DROP</span> <span class="keyword">PARTITION</span> P_20191202;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>partition</tag>
      </tags>
  </entry>
  <entry>
    <title>防止Mac合盖休眠</title>
    <url>/2020/02/11/%E9%98%B2%E6%AD%A2Mac%E5%90%88%E7%9B%96%E4%BC%91%E7%9C%A0/</url>
    <content><![CDATA[<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 禁止显示器睡眠</span></span><br><span class="line">caffeinate -d</span><br><span class="line"><span class="comment"># 禁止系统睡眠</span></span><br><span class="line">caffeinate -is</span><br><span class="line"><span class="comment"># 当1000号进程存在时不睡眠</span></span><br><span class="line">caffeinate -w 1000</span><br><span class="line"><span class="comment"># 1小时内不睡眠</span></span><br><span class="line">caffeinate -t 3600</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="Doc"><a href="#Doc" class="headerlink" title="Doc"></a>Doc</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># man caffeinate</span></span><br><span class="line"></span><br><span class="line">CAFFEINATE(8)             BSD System Manager<span class="string">'s Manual            CAFFEINATE(8)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">NAME</span></span><br><span class="line"><span class="string">     caffeinate -- prevent the system from sleeping on behalf of a utility</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SYNOPSIS</span></span><br><span class="line"><span class="string">     caffeinate [-disu] [-t timeout] [-w pid] [utility arguments...]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">DESCRIPTION</span></span><br><span class="line"><span class="string">     caffeinate creates assertions to alter system sleep behavior.  If no assertion flags are specified, caffeinate creates an assertion to prevent idle sleep.  If a utility is specified, caffeinate creates the assertions on the utility'</span>s behalf, and those assertions will persist <span class="keyword">for</span> the duration of the</span><br><span class="line">     utility<span class="string">'s execution. Otherwise, caffeinate creates the assertions directly, and those assertions will persist until caffeinate exits.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     Available options:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     -d      Create an assertion to prevent the display from sleeping.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     -i      Create an assertion to prevent the system from idle sleeping.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     -m      Create an assertion to prevent the disk from idle sleeping.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     -s      Create an assertion to prevent the system from sleeping. This assertion is valid only when system is running on AC power.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     -u      Create an assertion to declare that user is active. If the display is off, this option turns the display on and prevents the display from going into idle sleep. If a timeout is not specified with '</span>-t<span class="string">' option, then this assertion is taken with a default of 5 second timeout.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     -t      Specifies the timeout value in seconds for which this assertion has to be valid. The assertion is dropped after the specified timeout. Timeout value is not used when an utility is invoked with this command.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     -w      Waits for the process with the specified pid to exit. Once the the process exits, the assertion is also released.  This option is ignored when used with utility option.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EXAMPLE</span></span><br><span class="line"><span class="string">     caffeinate -i make</span></span><br><span class="line"><span class="string">        caffeinate forks a process, execs "make" in it, and holds an assertion that prevents idle sleep as long as that process is running.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SEE ALSO</span></span><br><span class="line"><span class="string">     pmset(1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string">     /usr/bin/caffeinate</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Darwin                         November 9, 2012                         Darwin</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>关闭SELinux</title>
    <url>/2020/03/29/%E5%85%B3%E9%97%ADSELinux/</url>
    <content><![CDATA[<p><strong>临时关闭：</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">setenforce 0</span><br></pre></td></tr></table></figure>

<p><strong>永久关闭：</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">'s/SELINUX=enforcing/SELINUX=disabled/'</span> /etc/selinux/config</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>SELinux</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS关闭swap</title>
    <url>/2020/04/05/CentOS%E5%85%B3%E9%97%ADswap/</url>
    <content><![CDATA[<blockquote>
<p><strong>环境</strong><br>CentOS 8</p>
</blockquote>
<blockquote>
<p>来源<br><a href="https://serverfault.com/questions/684771/best-way-to-disable-swap-in-linux" target="_blank" rel="noopener">https://serverfault.com/questions/684771/best-way-to-disable-swap-in-linux</a></p>
</blockquote>
<ol>
<li><p>执行 <code>swapoff -a</code> 关闭分区</p>
</li>
<li><p>执行 <code>free -h</code> 应该可以看到 swap 行的 total、used、free 均为0</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          7.6Gi       6.5Gi       891Mi       8.0Mi       273Mi       938Mi</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑 <code>/etc/fstab</code> 将 swap 相关行注释</p>
</li>
</ol>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>swap</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus+Grafana打造监控系统</title>
    <url>/2020/04/05/Prometheus-Grafana%E6%89%93%E9%80%A0%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<blockquote>
<p><strong>环境</strong><br>CentOS 8</p>
</blockquote>
<h1 id="什么是-Prometheus"><a href="#什么是-Prometheus" class="headerlink" title="什么是 Prometheus"></a>什么是 Prometheus</h1><p>Prometheus 是一套开源的系统监控报警框架。它启发于 Google 的 borgmon 监控系统，由工作在 SoundCloud 的 google 前员工在 2012 年创建，作为社区开源项目进行开发，并于 2015 年正式发布。2016 年，Prometheus 正式加入 Cloud Native Computing Foundation，成为受欢迎度仅次于 Kubernetes 的项目。</p>
<a id="more"></a>

<p>作为新一代的监控框架，Prometheus 具有以下特点：</p>
<p>强大的多维度数据模型：<br>时间序列数据通过 metric 名和键值对来区分。<br>所有的 metrics 都可以设置任意的多维标签。<br>数据模型更随意，不需要刻意设置为以点分隔的字符串。<br>可以对数据模型进行聚合，切割和切片操作。<br>支持双精度浮点类型，标签可以设为全 unicode。<br>灵活而强大的查询语句（PromQL）：在同一个查询语句，可以对多个 metrics 进行乘法、加法、连接、取分数位等操作。<br>易于管理： Prometheus server 是一个单独的二进制文件，可直接在本地工作，不依赖于分布式存储。<br>高效：平均每个采样点仅占 3.5 bytes，且一个 Prometheus server 可以处理数百万的 metrics。<br>使用 pull 模式采集时间序列数据，这样不仅有利于本机测试而且可以避免有问题的服务器推送坏的 metrics。<br>可以采用 push gateway 的方式把时间序列数据推送至 Prometheus server 端。<br>可以通过服务发现或者静态配置去获取监控的 targets。<br>有多种可视化图形界面。<br>易于伸缩。<br>需要指出的是，由于数据采集可能会有丢失，所以 Prometheus 不适用对采集数据要 100% 准确的情形。但如果用于记录时间序列数据，Prometheus 具有很大的查询优势，此外，Prometheus 适用于微服务的体系架构。</p>
<h1 id="Prometheus-组成及架构"><a href="#Prometheus-组成及架构" class="headerlink" title="Prometheus 组成及架构"></a>Prometheus 组成及架构</h1><p>Prometheus 生态圈中包含了多个组件，其中许多组件是可选的：</p>
<ul>
<li><strong>Prometheus Server</strong>: 用于收集和存储时间序列数据。</li>
<li><strong>Client Library</strong>: 客户端库，为需要监控的服务生成相应的 metrics 并暴露给 Prometheus server。当 Prometheus server 来 pull 时，直接返回实时状态的 metrics。</li>
<li><strong>Push Gateway</strong>: 主要用于短期的 jobs。由于这类 jobs 存在时间较短，可能在 Prometheus 来 pull 之前就消失了。为此，这次 jobs 可以直接向 Prometheus server 端推送它们的 metrics。这种方式主要用于服务层面的 metrics，对于机器层面的 metrices，需要使用 node exporter。</li>
<li><strong>Exporters</strong>: 用于暴露已有的第三方服务的 metrics 给 Prometheus。</li>
<li><strong>Alertmanager</strong>: 从 Prometheus server 端接收到 alerts 后，会进行去除重复数据，分组，并路由到对收的接受方式，发出报警。常见的接收方式有：电子邮件，pagerduty，OpsGenie, webhook 等。</li>
<li>一些其他的工具。</li>
</ul>
<p>图 1 为 Prometheus 官方文档中的架构图：</p>
<h5 id="图-1-Prometheus-架构图"><a href="#图-1-Prometheus-架构图" class="headerlink" title="图 1. Prometheus 架构图"></a>图 1. Prometheus 架构图</h5><p><img src="https://img.nichijou.me/20200405010508.png" alt="img"></p>
<p>从上图可以看出，Prometheus 的主要模块包括：Prometheus server, exporters, Pushgateway, PromQL, Alertmanager 以及图形界面。</p>
<p>其大概的工作流程是：</p>
<ol>
<li>Prometheus server 定期从配置好的 jobs 或者 exporters 中拉 metrics，或者接收来自 Pushgateway 发过来的 metrics，或者从其他的 Prometheus server 中拉 metrics。</li>
<li>Prometheus server 在本地存储收集到的 metrics，并运行已定义好的 alert.rules，记录新的时间序列或者向 Alertmanager 推送警报。</li>
<li>Alertmanager 根据配置文件，对接收到的警报进行处理，发出告警。</li>
<li>在图形界面中，可视化采集数据。</li>
</ol>
<h1 id="什么是-Grafana"><a href="#什么是-Grafana" class="headerlink" title="什么是 Grafana"></a>什么是 Grafana</h1><p>Grafana可以通过可视化的方式向你呈现数据。在Grafana中，你可以通过将Prometheus添加为数据源，来将Grafana作为前端的数据展示。</p>
<hr>
<h1 id="node-exporter-安装"><a href="#node-exporter-安装" class="headerlink" title="node_exporter 安装"></a>node_exporter 安装</h1><h2 id="获取-node-exporter"><a href="#获取-node-exporter" class="headerlink" title="获取 node_exporter"></a>获取 node_exporter</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz</span><br><span class="line">tar -zxvf node_exporter-0.18.1.linux-amd64.tar.gz</span><br><span class="line">mkdir -p /usr/<span class="built_in">local</span>/prom</span><br><span class="line">mv node_exporter-0.18.1.linux-amd64 /usr/<span class="built_in">local</span>/prom/node_exporter</span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认监听9100端口，可通过 <code>--web.listen-address=&quot;:9100&quot;</code> 修改</p>
</blockquote>
<h2 id="创建-Systemd"><a href="#创建-Systemd" class="headerlink" title="创建 Systemd"></a>创建 Systemd</h2><blockquote>
<p>/etc/systemd/system/node_exporter.service</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=node_exporter</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/prom/node_exporter/node_exporter --web.listen-address=:9100</span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> node_exporter</span><br><span class="line">systemctl start node_exporter</span><br></pre></td></tr></table></figure>

<h1 id="Prometheus-安装"><a href="#Prometheus-安装" class="headerlink" title="Prometheus 安装"></a>Prometheus 安装</h1><blockquote>
<p><a href="https://prometheus.io/download/" target="_blank" rel="noopener">https://prometheus.io/download/</a></p>
</blockquote>
<h2 id="获取-Prometheus"><a href="#获取-Prometheus" class="headerlink" title="获取 Prometheus"></a>获取 Prometheus</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://github.com/prometheus/prometheus/releases/download/v2.17.1/prometheus-2.17.1.linux-amd64.tar.gz</span><br><span class="line">tar -zxvf prometheus-2.17.1.linux-amd64.tar.gz</span><br><span class="line">mv prometheus-2.17.1.linux-amd64 /usr/<span class="built_in">local</span>/prometheus</span><br><span class="line">mkdir -p /usr/<span class="built_in">local</span>/etc/prometheus</span><br><span class="line">cp /usr/<span class="built_in">local</span>/prometheus/prometheus.yml /usr/<span class="built_in">local</span>/etc/prometheus</span><br></pre></td></tr></table></figure>

<h2 id="Prometheus-配置追加-node-exporter"><a href="#Prometheus-配置追加-node-exporter" class="headerlink" title="Prometheus 配置追加 node_exporter"></a>Prometheus 配置追加 node_exporter</h2><blockquote>
<p>/usr/local/etc/prometheus/prometheus.yml</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line">  - job_name: <span class="string">'node'</span></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [<span class="string">'localhost:9100'</span>]</span><br></pre></td></tr></table></figure>

<h2 id="创建-Systemd-1"><a href="#创建-Systemd-1" class="headerlink" title="创建 Systemd"></a>创建 Systemd</h2><blockquote>
<p>/etc/systemd/system/prometheus.service</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=prometheus</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/prometheus/prometheus --config.file=/usr/<span class="built_in">local</span>/etc/prometheus/prometheus.yml</span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -HUP <span class="variable">$MAINPID</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> prometheus</span><br><span class="line">systemctl start prometheus</span><br></pre></td></tr></table></figure>

<h1 id="Grafana-安装"><a href="#Grafana-安装" class="headerlink" title="Grafana 安装"></a>Grafana 安装</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://dl.grafana.com/oss/release/grafana-6.7.2-1.x86_64.rpm</span><br><span class="line">sudo yum install grafana-6.7.2-1.x86_64.rpm</span><br><span class="line"></span><br><span class="line">systemctl start grafana-server.service</span><br></pre></td></tr></table></figure>

<p>添加 Prometheus 作为数据源</p>
<p><img src="https://img.nichijou.me/20200405141029.png" alt=""></p>
<p>在 <a href="https://grafana.com/grafana/dashboards" target="_blank" rel="noopener">https://grafana.com/grafana/dashboards</a> 有相当多别人分享的 Dashboard，可以方便的导入使用</p>
<h1 id="监控效果"><a href="#监控效果" class="headerlink" title="监控效果"></a>监控效果</h1><p><img src="https://img.nichijou.me/20200405141947.png" alt=""></p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
        <tag>Grafana</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes安装</title>
    <url>/2020/04/05/kubernetes%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<blockquote>
<p><strong>环境</strong><br>CentOS 8<br>Kubernetes 1.18.0</p>
</blockquote>
<blockquote>
<p><a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/</a></p>
</blockquote>
<h1 id="安装-kubeadm"><a href="#安装-kubeadm" class="headerlink" title="安装 kubeadm"></a>安装 kubeadm</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 SELinux 设置为 permissive 模式（相当于将其禁用）</span></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">'s/^SELINUX=enforcing$/SELINUX=permissive/'</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line">yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> --now kubelet</span><br><span class="line"></span><br><span class="line">modprobe br_netfilter</span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="使用-kubeadm-创建单个控制面板节点"><a href="#使用-kubeadm-创建单个控制面板节点" class="headerlink" title="使用 kubeadm 创建单个控制面板节点"></a>使用 kubeadm 创建单个控制面板节点</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">  --apiserver-advertise-address=&#123;your_host&#125; \</span><br><span class="line">  --apiserver-bind-port=6443 \</span><br><span class="line">  --pod-network-cidr=10.233.0.0/16 \</span><br><span class="line">  --service-cidr=10.96.0.0/12</span><br><span class="line"></span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>

<p>执行 <code>kubeadm init</code> 之后会输出类似</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a Pod network to the cluster.</span><br><span class="line">Run <span class="string">"kubectl apply -f [podnetwork].yaml"</span> with one of the options listed at:</span><br><span class="line">  /docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">You can now join any number of machines by running the following on each node</span><br><span class="line">as root:</span><br><span class="line"></span><br><span class="line">  kubeadm join &lt;control-plane-host&gt;:&lt;control-plane-port&gt; --token &lt;token&gt; --discovery-token-ca-cert-hash sha256:&lt;<span class="built_in">hash</span>&gt;</span><br></pre></td></tr></table></figure>

<p>记录下 <code>kubeadm join &lt;control-plane-host&gt;:&lt;control-plane-port&gt; --token &lt;token&gt; --discovery-token-ca-cert-hash sha256:&lt;hash&gt;</code>，后续加入节点时会用到</p>
<p>token有效期为24小时，可以通过 <code>kubeadm token list</code> 查看</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">TOKEN                     TTL         EXPIRES                     USAGES                   DESCRIPTION                                                EXTRA GROUPS</span><br><span class="line">tmxcmx.1utw7s3anszbd03z   23h         2020-04-06T16:24:03+08:00   authentication,signing   The default bootstrap token generated by <span class="string">'kubeadm init'</span>.   system:bootstrappers:kubeadm:default-node-token</span><br></pre></td></tr></table></figure>

<p>如果token过期，可以通过 <code>kubeadm token create</code> 生成新的token</p>
<p>如果你忘了 <code>--discovery-token-ca-cert-hash</code> 的值，可以通过以下命令获取</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl x509 -pubkey -<span class="keyword">in</span> /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | \</span><br><span class="line">   openssl dgst -sha256 -hex | sed <span class="string">'s/^.* //'</span></span><br></pre></td></tr></table></figure>

<h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><blockquote>
<p><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/</a></p>
</blockquote>
<p>默认情况下由于安全问题 pod 不会被调度到控制节点上，如果你只有一个用于测试的节点，可以执行以下命令放行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure>

<h1 id="安装-Pod-network"><a href="#安装-Pod-network" class="headerlink" title="安装 Pod network"></a>安装 Pod network</h1><p>在控制节点上执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">KUBECONFIG=/etc/kubernetes/admin.conf kubectl apply -f https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/daemonset/kubeadm-kuberouter.yaml</span><br></pre></td></tr></table></figure>

<h1 id="加入节点"><a href="#加入节点" class="headerlink" title="加入节点"></a>加入节点</h1><p>在需要加入的机器上执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubeadm join &lt;control-plane-host&gt;:&lt;control-plane-port&gt; --token &lt;token&gt; --discovery-token-ca-cert-hash sha256:&lt;<span class="built_in">hash</span>&gt;</span><br></pre></td></tr></table></figure>

<p>加入后在控制节点上可以通过 <code>kubectl get nodes</code> 看到新加入的节点</p>
<h1 id="安装Dashboard"><a href="#安装Dashboard" class="headerlink" title="安装Dashboard"></a>安装Dashboard</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc7/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># recommended.yaml</span></span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort <span class="comment"># 新增：修改为NodePort</span></span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">      nodePort: 30001 <span class="comment"># 新增：映射到节点的30001端口</span></span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl create -f recommended.yaml</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取登陆token</span></span><br><span class="line">kubectl -n kube-system describe $(kubectl -n kube-system get secret -n kube-system -o name | grep namespace) | grep token</span><br></pre></td></tr></table></figure>

<p>浏览器打开 <a href="https://localhost:30001" target="_blank" rel="noopener">https://localhost:30001</a> 输入上面的 token即可登陆</p>
<blockquote>
<p>遇到 chrome 证书问题无法打开的问题，可以通过输入 <code>thisisunsafe</code> 绕过</p>
</blockquote>
<p><img src="https://img.nichijou.me/20200405202941.png" alt=""></p>
<h1 id="清理节点"><a href="#清理节点" class="headerlink" title="清理节点"></a>清理节点</h1><blockquote>
<p><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#tear-down" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#tear-down</a></p>
</blockquote>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>使用acme.sh申请letsencrypt泛域名证书</title>
    <url>/2020/04/18/%E4%BD%BF%E7%94%A8acme-sh%E7%94%B3%E8%AF%B7letsencrypt%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<blockquote>
<p><strong>环境</strong><br>CentOS 8<br>nginx/1.14.1</p>
</blockquote>
<blockquote>
<p>参考<br><a href="https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E</a></p>
</blockquote>
<h1 id="安装-acme-sh"><a href="#安装-acme-sh" class="headerlink" title="安装 acme.sh"></a>安装 acme.sh</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl  https://get.acme.sh | sh</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h1><blockquote>
<p>以下3种选一种即可，通常直接使用 Http 验证</p>
</blockquote>
<h2 id="Http-验证"><a href="#Http-验证" class="headerlink" title="Http 验证"></a>Http 验证</h2><blockquote>
<p>适合有外部可以直接访问的服务器的情况</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">acme.sh --issue -d mydomain.com -d <span class="string">"*.example.com"</span> --nginx</span><br></pre></td></tr></table></figure>

<h2 id="DNS-API-验证"><a href="#DNS-API-验证" class="headerlink" title="DNS API 验证"></a>DNS API 验证</h2><blockquote>
<p>适合没有外部可以直接访问的服务器的情况，比如内网域名</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CF_Key=<span class="string">"sdfsdfsdfljlbjkljlkjsdfoiwje"</span></span><br><span class="line"><span class="built_in">export</span> CF_Email=<span class="string">"xxxx@sss.com"</span></span><br><span class="line">acme.sh --issue -d example.com -d <span class="string">"*.example.com"</span> --dns dns_cf</span><br></pre></td></tr></table></figure>

<h2 id="手动-DNS-验证"><a href="#手动-DNS-验证" class="headerlink" title="手动 DNS 验证"></a>手动 DNS 验证</h2><blockquote>
<p>和 DNS API 验证相同，差别在于需要手动添加一条 txt 解析记录</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">acme.sh --issue -d example.com -d <span class="string">"*.example.com"</span> --dns \</span><br><span class="line"> --yes-I-know-dns-manual-mode-enough-go-ahead-please</span><br><span class="line"></span><br><span class="line"><span class="comment"># Domains have changed.</span></span><br><span class="line"><span class="comment"># Multi domain='DNS:example.com,DNS:*.example.com'</span></span><br><span class="line"><span class="comment"># Getting domain auth token for each domain</span></span><br><span class="line"><span class="comment"># Getting webroot for domain='example.com'</span></span><br><span class="line"><span class="comment"># Getting webroot for domain='*.example.com'</span></span><br><span class="line"><span class="comment"># Add the following TXT record:</span></span><br><span class="line"><span class="comment"># Domain: '_acme-challenge.example.com'</span></span><br><span class="line"><span class="comment"># TXT value: 'xxxxxx'</span></span><br><span class="line"><span class="comment"># Please be aware that you prepend _acme-challenge. before your domain</span></span><br><span class="line"><span class="comment"># so the resulting subdomain will be: _acme-challenge.example.com</span></span><br><span class="line"><span class="comment"># Please add the TXT records to the domains, and re-run with --renew.</span></span><br><span class="line"><span class="comment"># Please add '--debug' or '--log' to check more details.</span></span><br><span class="line"><span class="comment"># See: https://github.com/acmesh-official/acme.sh/wiki/How-to-debug-acme.sh</span></span><br></pre></td></tr></table></figure>

<p>记录下上面的 <code>TXT value: &#39;xxxxxx&#39;</code></p>
<p>去 DNS 解析中，新增一条 txt 记录，域名为 <code>_acme-challenge.example.com</code>，值为 <code>xxxxxx</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">acme.sh --renew -d example.com -d <span class="string">"*.example.com"</span> \</span><br><span class="line"> --yes-I-know-dns-manual-mode-enough-go-ahead-please</span><br></pre></td></tr></table></figure>

<h1 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h1><p>新建目录存放证书</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir /etc/nginx/ssl/example.com</span><br></pre></td></tr></table></figure>

<p>安装证书</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">acme.sh --install-cert -d example.com \</span><br><span class="line">--key-file       /etc/nginx/ssl/example.com/key.pem  \</span><br><span class="line">--fullchain-file /etc/nginx/ssl/example.com/cert.pem \</span><br><span class="line">--reloadcmd     <span class="string">"systemctl force-reload nginx.service"</span></span><br></pre></td></tr></table></figure>

<h1 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h1><h2 id="新增-options-ssl-nginx-conf"><a href="#新增-options-ssl-nginx-conf" class="headerlink" title="新增 options-ssl-nginx.conf"></a>新增 options-ssl-nginx.conf</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/nginx/ssl/options-ssl-nginx.conf</span></span><br><span class="line">ssl_session_cache shared:le_nginx_SSL:10m;</span><br><span class="line">ssl_session_timeout 1440m;</span><br><span class="line"></span><br><span class="line">ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">ssl_prefer_server_ciphers off;</span><br><span class="line"></span><br><span class="line">ssl_ciphers <span class="string">"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA"</span>;</span><br></pre></td></tr></table></figure>

<h2 id="生成-dhparam-pem"><a href="#生成-dhparam-pem" class="headerlink" title="生成 dhparam.pem"></a>生成 dhparam.pem</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl dhparam -out /etc/nginx/ssl/example.com/dhparam.pem 2048</span><br></pre></td></tr></table></figure>

<h2 id="修改-nginx-配置"><a href="#修改-nginx-配置" class="headerlink" title="修改 nginx 配置"></a>修改 nginx 配置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># conf 中追加</span></span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    ssl_certificate /etc/nginx/ssl/example.com/cert.pem;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/example.com/key.pem;</span><br><span class="line">    include /etc/nginx/ssl/options-ssl-nginx.conf;</span><br><span class="line">    ssl_dhparam /etc/nginx/ssl/example.com/dhparam.pem;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$scheme</span> != <span class="string">"https"</span>)&#123;</span><br><span class="line">        <span class="built_in">return</span> 301 https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="更新-acme-sh"><a href="#更新-acme-sh" class="headerlink" title="更新 acme.sh"></a>更新 acme.sh</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">acme.sh --upgrade</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>acme.sh</tag>
        <tag>letsencrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>安装istio</title>
    <url>/2020/04/18/%E5%AE%89%E8%A3%85istio/</url>
    <content><![CDATA[<blockquote>
<p><strong>环境</strong><br>CentOS 8<br>Kubernetes 1.18.0<br>Istio 1.5.1</p>
</blockquote>
<blockquote>
<p>参考<br><a href="https://istio.io/zh/docs/setup/getting-started/" target="_blank" rel="noopener">https://istio.io/zh/docs/setup/getting-started/</a></p>
</blockquote>
<h1 id="下载-Istio"><a href="#下载-Istio" class="headerlink" title="下载 Istio"></a>下载 Istio</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -L https:&#x2F;&#x2F;istio.io&#x2F;downloadIstio | sh -</span><br><span class="line">export PATH&#x3D;PATH&#x3D;$PWD&#x2F;istio-1.5.1&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装demo配置"><a href="#安装demo配置" class="headerlink" title="安装demo配置"></a>安装demo配置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">istioctl manifest apply --<span class="built_in">set</span> profile=demo</span><br></pre></td></tr></table></figure>

<p>查看 istio-ingressgateway 是否有对外IP</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@zeus ➜  kubectl get svc -n istio-system</span><br><span class="line">NAME                        TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                                                                                                                                      AGE</span><br><span class="line">grafana                     ClusterIP      10.111.163.144   &lt;none&gt;        3000/TCP                                                                                                                                     20s</span><br><span class="line">istio-egressgateway         ClusterIP      10.96.185.62     &lt;none&gt;        80/TCP,443/TCP,15443/TCP                                                                                                                     21s</span><br><span class="line">istio-ingressgateway        LoadBalancer   10.98.84.118     &lt;pending&gt;     15020:30147/TCP,80:31083/TCP,443:32760/TCP,15029:30736/TCP,15030:31984/TCP,15031:30300/TCP,15032:32406/TCP,31400:31638/TCP,15443:30198/TCP   21s</span><br><span class="line">istio-pilot                 ClusterIP      10.99.161.128    &lt;none&gt;        15010/TCP,15011/TCP,15012/TCP,8080/TCP,15014/TCP,443/TCP                                                                                     41s</span><br><span class="line">istiod                      ClusterIP      10.111.219.124   &lt;none&gt;        15012/TCP,443/TCP                                                                                                                            41s</span><br><span class="line">jaeger-agent                ClusterIP      None             &lt;none&gt;        5775/UDP,6831/UDP,6832/UDP                                                                                                                   20s</span><br><span class="line">jaeger-collector            ClusterIP      10.101.131.86    &lt;none&gt;        14267/TCP,14268/TCP,14250/TCP                                                                                                                20s</span><br><span class="line">jaeger-collector-headless   ClusterIP      None             &lt;none&gt;        14250/TCP                                                                                                                                    20s</span><br><span class="line">jaeger-query                ClusterIP      10.107.220.77    &lt;none&gt;        16686/TCP                                                                                                                                    20s</span><br><span class="line">kiali                       ClusterIP      10.111.202.202   &lt;none&gt;        20001/TCP                                                                                                                                    19s</span><br><span class="line">prometheus                  ClusterIP      10.101.44.140    &lt;none&gt;        9090/TCP                                                                                                                                     19s</span><br><span class="line">tracing                     ClusterIP      10.104.231.92    &lt;none&gt;        80/TCP                                                                                                                                       19s</span><br><span class="line">zipkin                      ClusterIP      10.99.8.133      &lt;none&gt;        9411/TCP                                                                                                                                     19s</span><br></pre></td></tr></table></figure>

<p>如果 istio-ingressgateway 显示 pending，说明没有可以使用的外部负载均衡器，可以通过 <code>kubectl edit service istio-ingressgateway -n istio-system</code> 来指定一个 externalIP</p>
<p><img src="https://img.nichijou.me/20200420000830.png" alt=""></p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>istio</tag>
      </tags>
  </entry>
  <entry>
    <title>创建NFS网络文件系统</title>
    <url>/2020/04/18/%E5%88%9B%E5%BB%BANFS%E7%BD%91%E7%BB%9C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<blockquote>
<p><strong>环境</strong><br>CentOS 8</p>
</blockquote>
<blockquote>
<p>参考<br><a href="https://wiki.archlinux.org/index.php/NFS_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/NFS_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>
</blockquote>
<h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><h2 id="安装-nfs-utils"><a href="#安装-nfs-utils" class="headerlink" title="安装 nfs-utils"></a>安装 nfs-utils</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install nfs-utils</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> rpcbind.service</span><br><span class="line">systemctl <span class="built_in">enable</span> nfs-server.service</span><br><span class="line"></span><br><span class="line">systemctl start rpcbind.service</span><br><span class="line">systemctl start nfs-server.service</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="创建共享目录"><a href="#创建共享目录" class="headerlink" title="创建共享目录"></a>创建共享目录</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir /nfs</span><br><span class="line">chmod 755 /nfs</span><br></pre></td></tr></table></figure>

<h2 id="配置-nfs"><a href="#配置-nfs" class="headerlink" title="配置 nfs"></a>配置 nfs</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/exports</span></span><br><span class="line">/nfs/    192.168.0.0/16(rw,sync,no_root_squash,no_all_squash)</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启nfs-server</span></span><br><span class="line">systemctl restart nfs-server.service</span><br></pre></td></tr></table></figure>

<h4 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h4><ul>
<li>ro：共享目录只读；</li>
<li>rw：共享目录可读可写；</li>
<li>all_squash：所有访问用户都映射为匿名用户或用户组；</li>
<li>no_all_squash（默认）：访问用户先与本机用户匹配，匹配失败后再映射为匿名用户或用户组；</li>
<li>root_squash（默认）：将来访的root用户映射为匿名用户或用户组；</li>
<li>no_root_squash：来访的root用户保持root帐号权限；</li>
<li>anonuid=<UID>：指定匿名访问用户的本地用户UID，默认为nfsnobody（65534）；</li>
<li>anongid=<GID>：指定匿名访问用户的本地用户组GID，默认为nfsnobody（65534）；</li>
<li>secure（默认）：限制客户端只能从小于1024的tcp/ip端口连接服务器；</li>
<li>insecure：允许客户端从大于1024的tcp/ip端口连接服务器；</li>
<li>sync：将数据同步写入内存缓冲区与磁盘中，效率低，但可以保证数据的一致性；</li>
<li>async：将数据先保存在内存缓冲区中，必要时才写入磁盘；</li>
<li>wdelay（默认）：检查是否有相关的写操作，如果有则将这些写操作一起执行，这样可以提高效率；</li>
<li>no_wdelay：若有写操作则立即执行，应与sync配合使用；</li>
<li>subtree_check（默认） ：若输出目录是一个子目录，则nfs服务器将检查其父目录的权限；</li>
<li>no_subtree_check ：即使输出目录是一个子目录，nfs服务器也不检查其父目录的权限，这样可以提高效率；</li>
</ul>
<h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mount -t nfs -o vers=4 servername:/music /mountpoint/on/client</span><br></pre></td></tr></table></figure>

<h2 id="通过-fstab-自动挂载"><a href="#通过-fstab-自动挂载" class="headerlink" title="通过 fstab 自动挂载"></a>通过 fstab 自动挂载</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/fstab</span></span><br><span class="line">servername:/music   /mountpoint/on/client   nfs   defaults	0 0</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>NFS</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter+InfluxDB+Grafana构建性能测试平台</title>
    <url>/2020/05/21/JMeter-InfluxDB-Grafana%E6%9E%84%E5%BB%BA%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<blockquote>
<p><strong>环境</strong><br>CentOS 8<br>JMeter 5.3<br>InfluxDB 1.8.0<br>Grafana 7.0.0</p>
</blockquote>
<h1 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h1><p><img src="https://img.nichijou.me/20200521184841.png" alt=""></p>
<h4 id="JMeter"><a href="#JMeter" class="headerlink" title="JMeter"></a>JMeter</h4><p><a href="https://jmeter.apache.org/" target="_blank" rel="noopener">https://jmeter.apache.org/</a></p>
<p>JMeter是Apache组织开发的性能测试工具</p>
<h4 id="InfluxDB"><a href="#InfluxDB" class="headerlink" title="InfluxDB"></a>InfluxDB</h4><p><a href="https://www.influxdata.com/" target="_blank" rel="noopener">https://www.influxdata.com/</a></p>
<p>InfluxDB是一个由InfluxData开发的开源时序型数据库</p>
<p>在这里用于存储JMeter产生的压测数据</p>
<h4 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h4><p><a href="https://grafana.com/" target="_blank" rel="noopener">https://grafana.com/</a></p>
<p>Grafana是一个多平台的数据分析解决方案</p>
<p>在这里作为压测结果的可视化前端</p>
<a id="more"></a>

<h1 id="构建使用"><a href="#构建使用" class="headerlink" title="构建使用"></a>构建使用</h1><h4 id="InfluxDB-Grafana"><a href="#InfluxDB-Grafana" class="headerlink" title="InfluxDB + Grafana"></a>InfluxDB + Grafana</h4><p>官网提供了各自安装的详细方法，这边已经打包了一个开箱即用的环境，可以通过以下方式一键安装</p>
<blockquote>
<p>依赖<br>Docker Engine 17.06.0+<br>Docker Compose 1.14.0+</p>
<p>集成工具<br>Grafana 7.0.0<br>InfluxDB 1.8<br>Apache JMeter Dashboard</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 未安装 docker compose 需要先安装 docker compose</span></span><br><span class="line">curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Grafana + Influxdb + JMeterDashboard 集成环境</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Sinute/jmeter-grafana-influxdb.git</span><br><span class="line"><span class="built_in">cd</span> jmeter-grafana-influxdb</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure>

<h4 id="JMeter-1"><a href="#JMeter-1" class="headerlink" title="JMeter"></a>JMeter</h4><p>JMeter如何使用不是这边的重点不再赘述</p>
<p>为了将结果上报 InfluxDB ，需要新增一个 BackendListener</p>
<p><img src="https://img.nichijou.me/20200521182814.png" alt=""></p>
<p>执行测试，访问 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> , 默认用户名密码 admin:admin</p>
<p><img src="https://img.nichijou.me/20200521182825.png" alt=""></p>
<h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h4 id="分布式性能测试"><a href="#分布式性能测试" class="headerlink" title="分布式性能测试"></a>分布式性能测试</h4><p><img src="https://img.nichijou.me/20200521185028.png" alt=""></p>
<p>当压测需要的并发数比较大，或者压测机性能较弱时，可以考虑分布式测试方案。</p>
<p><strong>jmeter-server</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./jmeter-server -Jserver.rmi.ssl.disable=<span class="literal">true</span> -Djava.rmi.server.hostname=hostname -Jserver.rmi.localport=port</span><br></pre></td></tr></table></figure>

<p><strong>jmeter-client</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jmeter/bin/jmeter.properties</span></span><br><span class="line">remote_hosts=hostname:port,hostname-x:port-x</span><br></pre></td></tr></table></figure>

<p>最后通过 jmeter-client 启动测试</p>
<h4 id="系统性能采集"><a href="#系统性能采集" class="headerlink" title="系统性能采集"></a>系统性能采集</h4><p>可以通过 node_exporter + prometheus + grafana 的方式构建系统监控平台，达到监控被压测服务器的目的。具体原理和 influxDB + grafana 类似，网上也有不少教程，有兴趣可以自行查找，这边不多展开。</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
  <entry>
    <title>更改windows键位</title>
    <url>/2020/05/24/%E6%9B%B4%E6%94%B9windows%E9%94%AE%E4%BD%8D/</url>
    <content><![CDATA[<blockquote>
<p><strong>环境</strong><br>Windows 10</p>
</blockquote>
<p>最近发现 Windows Terminal 正式版发布了， ssh 到 linux 服务器试了下感觉还不错，至少不再有原来奇奇怪怪的快捷键和排版问题了，默认的字体样式也还阔以233。简单配置了一下打算把吃灰的 windows 当作备用开发机。然而发现习惯了 mac 下把 <code>CapsLock</code> 映射为 <code>Ctrl</code> ， windows 下老是按错，于是乎查了一下解决办法。</p>
<a id="more"></a>

<h2 id="先说解决方法"><a href="#先说解决方法" class="headerlink" title="先说解决方法"></a>先说解决方法</h2><p><code>win + r</code> ， 输入 <code>regedit</code> ， 打开注册表编辑器，找到 <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout</code> ， 新建二进制值 <code>ScanCode Map</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">0000 0000 0000 0000</span><br><span class="line">0200 0000 1D00 3A00</span><br><span class="line">0000 0000</span><br></pre></td></tr></table></figure>

<p><img src="https://img.nichijou.me/20200524165207.PNG" alt=""></p>
<p>保存重启即可</p>
<h2 id="然后说说原理"><a href="#然后说说原理" class="headerlink" title="然后说说原理"></a>然后说说原理</h2><p><code>ScanCode Map</code> 的格式为</p>
<p><img src="https://img.nichijou.me/20200524170547.png" alt=""></p>
<blockquote>
<p>二进制值采用 <a href="https://zh.wikipedia.org/zh-hans/%E5%AD%97%E8%8A%82%E5%BA%8F" target="_blank" rel="noopener">小端序</a></p>
</blockquote>
<ul>
<li>前8个字节为版本信息</li>
<li>接着4个字节为需要映射的按键个数（从2开始，即映射1个此处为2，映射2个此处为3）</li>
<li>紧跟着就是N段4个字节的映射关系（N和上一步中填写的映射个数有关），前2个字节为映射后的键盘扫描码，后2个字节为映射前的键盘扫描码</li>
<li>最后4个字节全0结束</li>
</ul>
<p><del>至于为什么从2开始，我个人无责任猜测：因为最后还有4字节的结束符，因此这边的大小 * 4字节刚好就是整段大小</del></p>
<p>例：</p>
<p>在 <code>CapsLock</code> 映射为 <code>Ctrl</code> 的基础上，同时把 <code>Ctrl</code> 映射为 <code>CapsLock</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">0000 0000 0000 0000</span><br><span class="line">0300 0000 1D00 3A00</span><br><span class="line">3A00 1D00 0000 0000</span><br></pre></td></tr></table></figure>

<h2 id="最后是所有的键盘扫描码"><a href="#最后是所有的键盘扫描码" class="headerlink" title="最后是所有的键盘扫描码"></a>最后是所有的键盘扫描码</h2><table>
<thead>
<tr>
<th>#</th>
<th>X(Set 2)</th>
<th>keycap</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>29</td>
<td>` ~</td>
</tr>
<tr>
<td>2</td>
<td>02</td>
<td>1 !</td>
</tr>
<tr>
<td>3</td>
<td>03</td>
<td>2 @</td>
</tr>
<tr>
<td>4</td>
<td>04</td>
<td>3 #</td>
</tr>
<tr>
<td>5</td>
<td>05</td>
<td>4 $</td>
</tr>
<tr>
<td>6</td>
<td>06</td>
<td>5 % E</td>
</tr>
<tr>
<td>7</td>
<td>07</td>
<td>6 ^</td>
</tr>
<tr>
<td>8</td>
<td>08</td>
<td>7 &amp;</td>
</tr>
<tr>
<td>9</td>
<td>09</td>
<td>8 *</td>
</tr>
<tr>
<td>10</td>
<td>0a</td>
<td>9 (</td>
</tr>
<tr>
<td>11</td>
<td>0b</td>
<td>0 )</td>
</tr>
<tr>
<td>12</td>
<td>0c</td>
<td>- _</td>
</tr>
<tr>
<td>13</td>
<td>0d</td>
<td>= +</td>
</tr>
<tr>
<td>15</td>
<td>0e</td>
<td>Backspace</td>
</tr>
<tr>
<td>16</td>
<td>0f</td>
<td>Tab</td>
</tr>
<tr>
<td>17</td>
<td>10</td>
<td>Q</td>
</tr>
<tr>
<td>18</td>
<td>11</td>
<td>W</td>
</tr>
<tr>
<td>19</td>
<td>12</td>
<td>E</td>
</tr>
<tr>
<td>20</td>
<td>13</td>
<td>R</td>
</tr>
<tr>
<td>21</td>
<td>14</td>
<td>T</td>
</tr>
<tr>
<td>22</td>
<td>15</td>
<td>Y</td>
</tr>
<tr>
<td>23</td>
<td>16</td>
<td>U</td>
</tr>
<tr>
<td>24</td>
<td>17</td>
<td>I</td>
</tr>
<tr>
<td>25</td>
<td>18</td>
<td>O</td>
</tr>
<tr>
<td>26</td>
<td>19</td>
<td>P</td>
</tr>
<tr>
<td>27</td>
<td>1a</td>
<td>[ {</td>
</tr>
<tr>
<td>28</td>
<td>1b</td>
<td>] }</td>
</tr>
<tr>
<td>29</td>
<td>2b</td>
<td>\ |</td>
</tr>
<tr>
<td>30</td>
<td>3a</td>
<td>CapsLock</td>
</tr>
<tr>
<td>31</td>
<td>1e</td>
<td>A</td>
</tr>
<tr>
<td>32</td>
<td>1f</td>
<td>S</td>
</tr>
<tr>
<td>33</td>
<td>20</td>
<td>D</td>
</tr>
<tr>
<td>34</td>
<td>21</td>
<td>F</td>
</tr>
<tr>
<td>35</td>
<td>22</td>
<td>G</td>
</tr>
<tr>
<td>36</td>
<td>23</td>
<td>H</td>
</tr>
<tr>
<td>37</td>
<td>24</td>
<td>J</td>
</tr>
<tr>
<td>38</td>
<td>25</td>
<td>K</td>
</tr>
<tr>
<td>39</td>
<td>26</td>
<td>L</td>
</tr>
<tr>
<td>40</td>
<td>27</td>
<td>; :</td>
</tr>
<tr>
<td>41</td>
<td>28</td>
<td>‘ “</td>
</tr>
<tr>
<td>42</td>
<td>ff</td>
<td>non-US-1</td>
</tr>
<tr>
<td>43</td>
<td>1c</td>
<td>Enter</td>
</tr>
<tr>
<td>44</td>
<td>2a</td>
<td>LShift</td>
</tr>
<tr>
<td>46</td>
<td>2c</td>
<td>Z</td>
</tr>
<tr>
<td>47</td>
<td>2d</td>
<td>X</td>
</tr>
<tr>
<td>48</td>
<td>2e</td>
<td>C</td>
</tr>
<tr>
<td>49</td>
<td>2f</td>
<td>V</td>
</tr>
<tr>
<td>50</td>
<td>30</td>
<td>B</td>
</tr>
<tr>
<td>51</td>
<td>31</td>
<td>N</td>
</tr>
<tr>
<td>52</td>
<td>32</td>
<td>M</td>
</tr>
<tr>
<td>53</td>
<td>33</td>
<td>, &lt;</td>
</tr>
<tr>
<td>54</td>
<td>34</td>
<td>. &gt;</td>
</tr>
<tr>
<td>55</td>
<td>35</td>
<td>/ ?</td>
</tr>
<tr>
<td>57</td>
<td>36</td>
<td>RShift</td>
</tr>
<tr>
<td>58</td>
<td>1d</td>
<td>LCtrl</td>
</tr>
<tr>
<td>60</td>
<td>38</td>
<td>LAlt</td>
</tr>
<tr>
<td>61</td>
<td>39</td>
<td>space</td>
</tr>
<tr>
<td>62</td>
<td>e0-38</td>
<td>RAlt</td>
</tr>
<tr>
<td>64</td>
<td>e0-1d</td>
<td>RCtrl</td>
</tr>
<tr>
<td>75</td>
<td>e0-52</td>
<td>Insert</td>
</tr>
<tr>
<td>76</td>
<td>e0-53</td>
<td>Delete</td>
</tr>
<tr>
<td>80</td>
<td>e0-47</td>
<td>Home</td>
</tr>
<tr>
<td>81</td>
<td>e0-4f</td>
<td>End</td>
</tr>
<tr>
<td>85</td>
<td>e0-49</td>
<td>PgUp</td>
</tr>
<tr>
<td>86</td>
<td>e0-51</td>
<td>PgDn</td>
</tr>
<tr>
<td>79</td>
<td>e0-4b</td>
<td>Left</td>
</tr>
<tr>
<td>83</td>
<td>e0-48</td>
<td>Up</td>
</tr>
<tr>
<td>84</td>
<td>e0-50</td>
<td>Down</td>
</tr>
<tr>
<td>89</td>
<td>e0-4d</td>
<td>Right</td>
</tr>
<tr>
<td>90</td>
<td>45</td>
<td>NumLock</td>
</tr>
<tr>
<td>91</td>
<td>47</td>
<td>KP-7 / Home</td>
</tr>
<tr>
<td>92</td>
<td>4b</td>
<td>KP-4 / Left</td>
</tr>
<tr>
<td>93</td>
<td>4f</td>
<td>KP-1 / End</td>
</tr>
<tr>
<td>95</td>
<td>e0-35</td>
<td>KP-/</td>
</tr>
<tr>
<td>96</td>
<td>48</td>
<td>KP-8 / Up</td>
</tr>
<tr>
<td>97</td>
<td>4c</td>
<td>KP-5</td>
</tr>
<tr>
<td>98</td>
<td>50</td>
<td>KP-2 / Down</td>
</tr>
<tr>
<td>99</td>
<td>52</td>
<td>KP-0 / Ins</td>
</tr>
<tr>
<td>100</td>
<td>37</td>
<td>KP-*</td>
</tr>
<tr>
<td>101</td>
<td>49</td>
<td>KP-9 / PgUp</td>
</tr>
<tr>
<td>102</td>
<td>4d</td>
<td>KP-6 / Right</td>
</tr>
<tr>
<td>103</td>
<td>51</td>
<td>KP-3 / PgDn</td>
</tr>
<tr>
<td>104</td>
<td>53</td>
<td>KP-. / Del</td>
</tr>
<tr>
<td>105</td>
<td>4a</td>
<td>KP–</td>
</tr>
<tr>
<td>106</td>
<td>4e</td>
<td>KP-+</td>
</tr>
<tr>
<td>108</td>
<td>e0-1c</td>
<td>KP-Enter</td>
</tr>
<tr>
<td>110</td>
<td>01</td>
<td>Esc</td>
</tr>
<tr>
<td>112</td>
<td>3b</td>
<td>F1</td>
</tr>
<tr>
<td>113</td>
<td>3c</td>
<td>F2</td>
</tr>
<tr>
<td>114</td>
<td>3d</td>
<td>F3</td>
</tr>
<tr>
<td>115</td>
<td>3e</td>
<td>F4</td>
</tr>
<tr>
<td>116</td>
<td>3f</td>
<td>F5</td>
</tr>
<tr>
<td>117</td>
<td>40</td>
<td>F6</td>
</tr>
<tr>
<td>118</td>
<td>41</td>
<td>F7</td>
</tr>
<tr>
<td>119</td>
<td>42</td>
<td>F8</td>
</tr>
<tr>
<td>120</td>
<td>43</td>
<td>F9</td>
</tr>
<tr>
<td>121</td>
<td>44</td>
<td>F10</td>
</tr>
<tr>
<td>122</td>
<td>57</td>
<td>F11</td>
</tr>
<tr>
<td>123</td>
<td>58</td>
<td>F12</td>
</tr>
<tr>
<td>124</td>
<td>e0-37</td>
<td>PrtScr</td>
</tr>
<tr>
<td>0</td>
<td>54</td>
<td>Alt+SysRq</td>
</tr>
<tr>
<td>125</td>
<td>46</td>
<td>ScrollLock</td>
</tr>
<tr>
<td>126</td>
<td>e1-1d-45</td>
<td>Pause</td>
</tr>
<tr>
<td>0</td>
<td>e0-46</td>
<td>Ctrl+Break</td>
</tr>
<tr>
<td>0</td>
<td>e0-5b</td>
<td>LWin (USB: LGUI)</td>
</tr>
<tr>
<td>0</td>
<td>e0-5c</td>
<td>RWin (USB: RGUI)</td>
</tr>
<tr>
<td>0</td>
<td>e0-5d</td>
<td>Menu</td>
</tr>
<tr>
<td>0</td>
<td>e0-5f</td>
<td>Sleep</td>
</tr>
<tr>
<td>0</td>
<td>e0-5e</td>
<td>Power</td>
</tr>
<tr>
<td>0</td>
<td>e0-63</td>
<td>Wake</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
  <entry>
    <title>NUC8i5BEK开箱</title>
    <url>/2020/06/06/NUC8i5BEK%E5%BC%80%E7%AE%B1/</url>
    <content><![CDATA[<p>其实 NUC8 用了也有几个月了，原来配的 2 * 16G 的内存在4台虚拟机下稍显有点吃力。查了一下发现虽然 Intel 官方给出的规格中最大内存只支持到32G，但是网上有人试了下64G也完全没问题 ∑(ﾟДﾟ)。趁着618活动赶紧下单了2条32G，顺便补个开箱 ಥ_ಥ</p>
<p><img src="https://img.nichijou.me/20200606181609.jpeg" alt=""></p>
<a id="more"></a>

<p>型号是 NUC8i5BEK ，2020-03-18于京东入手。其实本来是想等10代NUC的，结果一方面10代U提升不大，显卡对比8代不升反降，另一方面NUC8折扣实在太大 _(:з」∠)_ ，京东 2499 的价格只比闲鱼贵了 250 左右，多个京东保修还是挺香的。先用上车8代，希望 NUC11 的 Tiger Lake 给力吧。</p>
<p><img src="https://img.nichijou.me/20200606181603.jpeg" alt=""></p>
<p>正面最左边是硬盘灯，中间是2个 USB3.1 接口（黄色的口支持关机充电），USB 接口右边是 3.5mm 耳机插口，最右边是电源键。</p>
<p><img src="https://img.nichijou.me/20200606181557.jpeg" alt=""></p>
<p>背后1个 HDMI2.0a，1个千兆网口， 2个 USB3.1接口，1个雷电3接口。可惜雷电口不能作为电源输入，只能通过比 NUC 本体还大的DC电源输入。</p>
<p><img src="https://img.nichijou.me/20200606181551.jpeg" alt=""></p>
<p>内部构造。我买的是薄款，厚款在顶盖上还可以加装一块2.5英寸硬盘。</p>
<p><img src="https://img.nichijou.me/20200606181542.png" alt=""></p>
<p>最后，可以正常识别 64G 内存，使用也完全正常。最大频率被限制在2400MHz，京东3200频的32G内存比2666频的贵了50%，这边还是建议省点钱用2666，说不定等 NUC11 出来的时候32G也白菜价了呢 ಥ_ಥ</p>
]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>NUC8</tag>
      </tags>
  </entry>
</search>
